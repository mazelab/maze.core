<div class="row-fluid">
    <div class="span12">
        <div class="row-fluid text-left cssBoxCenter">
            <button class="btn jsIconDelete"
                    title="<?= $this->translate("delete"); ?>"
                    data="<?= $this->url(array($this->html("message/_id")), "deleteNews"); ?>">
                <span class="icon-trash" title="<?= $this->translate("delete"); ?>"></span> <?= $this->translate("delete"); ?>
            </button>
            <div id="jsMessageStatus" class="btn-group" data-toggle="buttons-radio" >
                <? foreach ($this->form->status->getMultiOptions() as $key => $value): ?>
                <? $isActive = $this->form->status->getValue() == $key ? "active" : null; ?>
                <button name="status" class="btn <?= $isActive; ?>"
                        value="<?= $key; ?>"><?= $value; ?></button>
                <? if (Core_Model_NewsManager::STATUS_PUBLIC ==  $key): ?>
                <button style="margin-right:-1px;" class="btn"
                        data-toggle="dropdown">
                    <span class="caret"></span>&nbsp;
                </button>
                <ul class="dropdown-menu">
                    <li><a href="#" id="jsPublishNewsAndSendEmail">
                        <? if ($this->toBool("message/sentEmail") === true): ?>
                            <span class="jsTooltip icon-ok" title="<?= $this->translate("Message has been sent as an email"); ?>"></span>
                        <? endif; ?>
                        <?= $this->translate("Publish and send via email"); ?>
                    </a></li>
                </ul>
                <? endif; ?>
                <? endforeach; ?>
            </div>
        </div>
        <div class="row-fluid">
            <dl class="row-fluid">
                <dt class="span3">
                <label>
                    <?= $this->translate($this->form->title->getLabel()); ?>
                </label>
                </dt>
                <dd class="span5">
                    <?= $this->form->title; ?>
                </dd>
            </dl>
            <dl class="row-fluid">
                <dt class="span3">
                <label>
                    <?= $this->translate($this->form->content->getLabel()); ?>
                </label>
                </dt>
                <dd class="span5">
                    <?= $this->form->content; ?>
                </dd>
            </dl>
            <hr>
            <dl class="row-fluid">
                <dt class="span3">
                <label>
                    <?= $this->translate($this->form->teaser->getLabel()); ?>
                </label>
                </dt>
                <dd class="span5">
                    <?= $this->form->teaser; ?>
                </dd>
            </dl>
            <dl class="row-fluid">
                <dt class="span3">
                <label>
                    <?= $this->translate($this->form->sticky->getLabel()); ?>
                    <span class="icon-info-sign jsTooltip" title="<?= $this->translate("always kept at the upper position") ?>."></span>
                </label>
                </dt>
                <dd class="span5" id="jsStickyStatus">
                    <?= $this->form->sticky; ?>
                </dd>
            </dl>
            <dl class="row-fluid">
                <dt class="span3">
                <label>
                    <?= $this->translate("Tags"); ?>
                </label>
                </dt>
                <dd class="span9 jsNewsTags"></dd>
            </dl>
        </div>
        <div id="jsConfirmDeleteNews" class="modal hide fade">
            <div class="modal-body">
                <p><?= $this->translate("Shall the Message really be deleted?") ?></p>
            </div>
            <div class="modal-footer">
                <a class="btn jsButtonCancel" data-dismiss="modal"><?= $this->translate("cancel") ?></a>
                <a class="btn btn-primary jsButtonDelete" data-dismiss="modal"><?= $this->translate("ok") ?></a>
            </div>
        </div>
        <div id="jsPublishAndSend" class="modal hide fade">
            <div class="modal-body">
                <p><?= $this->translate("Shall the message send to all registered clients ?"); ?></p>
            </div>
            <div class="modal-footer">
                <a class="btn" data-dismiss="modal"><?= $this->translate("cancel") ?></a>
                <a class="btn btn-primary jsButtonSend" data-dismiss="modal"><?= $this->translate("ok") ?></a>
            </div>
        </div>
    </div>
</div>

<div id="markupMessagesTags" style="display:none;">
    <div id="templateContainer">
        <div class="span11">
            <div class="cssTagsContainer "style="margin-right:-4px;z-index: 2;">
                <div id="jsTagContainer"></div>
                <div class="cssTagsInput input-append pull-left">
                    <input type="text" id="jsTagName" class="cssTagName span2">
                    <button type="button" class="btn btn-mini cssTagButtonAdd" id="jsTagButtonAdd">
                        <span class="icon-plus" style="opacity:0.7;"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id="templateTag">
        <span class="label" style="cursor:default;margin-right:3px;">
            :name:
            <span class="cssTagButtonDelete jsTagButtonDelete">x</span>
        </span>
    </div>

</div>
<script type="text/javascript">
    (function($){
        var settings = {};
        var tagStack = {};

        $.fn.mazeMessageTags = function(args){
            var argVector = arguments;
            var selector  = this;

            processAjax = function(data){
                // creates an value object
                if (typeof data === "string"){
                    valueObject   = {id: data, value: data};
                }else valueObject = data;

                // data to be sent to the server
                sendObject = {};
                sendObject["tags["+ valueObject.id +"]"] = valueObject.value;
                ajaxOption = {
                    data: sendObject,
                    success :function(data){
                        if (valueObject.value === null && data.result){
                            settings.animation === false
                                ? methods.get(valueObject.id).remove()
                                : methods.get(valueObject.id).animate({
                                opacity: .1,
                                width  : 0
                            }, settings.duration, function() {
                                $(this).remove();
                            });
                            delete tagStack[valueObject.id];
                        }else if (data.result !== false && valueObject.id){
                            methods.add({id: data.result, value: valueObject.value}, false);
                        }
                        setMessages(data, true);
                    },
                    beforeSend :function(){
                        settings.onRequest.before.apply(this);
                    },
                    complete :function(){
                        settings.onRequest.done.apply(this);
                    }
                };

                $.ajax($.extend(ajaxOption, settings.ajax));
            };

            /**
             * @type Object
             */
            var methods = {

                /**
                 * deletes an certain tag entry
                 *
                 * @param   {String} tagId
                 * @returns {Boolean}
                 */
                del:function(tagId) {
                    valueObject   = {id: tagId, value: null};;

                    if (typeof methods.get(valueObject.id) === "object"){
                        processAjax(valueObject);
                        return true;
                    }

                    return false;
                },

                /**
                 * returns a certain registered tag entry
                 *
                 * @param   {String} tagId
                 * @returns {Boolean|HTMLSpanElement}
                 */
                get:function(tagId) {
                    if (typeof tagStack[tagId] === "object"){
                        return tagStack[tagId];
                    }

                    return false;
                },

                /**
                 * checks if an value already registered
                 *
                 * @param   {String} value
                 * @returns {Boolean}
                 */
                tagExist: function(value){
                    for (index in tagStack){
                        if (value === tagStack[index].tagValue && !tagStack[index].is(":hidden")){
                            return true;
                        }
                    }
                    return false;
                },

                /**
                 * adds a new tag entry
                 *
                 * @example add("valueString") || add({id:"idString", value: "valueString"})
                 * @param   {String|PlainObject} data
                 * @param   {Boolean} sendRequest
                 * @returns {Boolean|HTMLSpanElement}
                 */
                add:function(data, sendRequest){
                    // creates an value object
                    if (typeof data === "string"){
                        var valueObject   = {id: data, value: data};
                    }else valueObject = data;

                    if ($.trim(valueObject.value) === "" || methods.tagExist(valueObject.value)){
                        return false;
                    }

                    // build the tag element basend on the value object and sets the button handler
                    tag = methods._buildTag(valueObject);
                    tag.tagValue = valueObject.value;
                    tag.find(settings.classButtonDelete).click(function(){
                        methods.del(valueObject.id);
                    });

                    // registered the created tag and append to container
                    settings.container.append(tagStack[valueObject.id] = tag);

                    if (typeof sendRequest === "undefined" || sendRequest === true){
                        processAjax(valueObject);
                    } else  settings.animation === false
                        ? tag.show()
                        : tag.animate({
                        opacity: .9,
                        width: "toggle"
                    }, settings.duration);

                    return tag;
                },

                /**
                 * builds the tag element
                 *
                 * @protected
                 * @param   {PlainObject} valueObject
                 * @returns {HTMLSpanElement}
                 */
                _buildTag: function(valueObject){
                    template = document.getElementById("templateTag").cloneNode(true);
                    template.tagId = valueObject.id;

                    return $(template.innerHTML.replace(/\:name\:/, valueObject.value)).hide();
                }
            };

            return(selector.each(function(index, element){
                if (typeof args === "string" && typeof methods[args] === "function"){
                    return methods[args].apply(this, Array.prototype.slice.call(argVector, 1));
                }

                settings = $.extend($.fn.mazeMessageTags.defaults, typeof args === "object" ? args : {});
                template = document.getElementById("templateContainer").firstElementChild.cloneNode(true);

                $(template).appendTo($(this));

                // refresh the selector
                if (typeof settings.container !== "object" || typeof settings.container[0] === "undefined"){
                    settings.container = $(settings.container);
                }

                return this;
            }));
        };

        $.fn.mazeMessageTags.defaults = {
            classButtonDelete: ".jsTagButtonDelete",
            container: "#jsTagContainer",
            animation: false,
            duration : 300,
            ajax: {
                type: "post"
            },
            onRequest : {
                done  : function(){},
                before: function(){}
            }
        };
    })($);

</script>
<script type="text/javascript">
$(document).ready(function() {

    $(".jsTooltip").tooltip();

    $('.jsEditableTextareas').mazeEditable('<?= $this->url(array(), "newsDetail") ?>?format=json', $.extend({
        whiteSpace: true,
        type: "textarea",
        textarea : {
            rows : 9,
            class: true
        }
    }, mazeEditableOptions));

    $(".jsEditable").mazeEditable('<?= $this->url(array(), "newsDetail") ?>?format=json', mazeEditableOptions);

    $(".jsNewsTags").mazeMessageTags({
        ajax: {
            type: "post",
            url : "<?= $this->url(array($this->html("message/_id")), "tagNews")?>?format=json"
        },
        onRequest : {
            done  : function(){
                $("#jsTagName, #jsTagButtonAdd").attr("disabled", false);
            },
            before: function(){
                $("#jsTagName, #jsTagButtonAdd").attr("disabled", true);
            }
        }
    });

    $("#jsTagName").keydown(function(e){
        keyCode = e.which || e.keyCode;
        if (keyCode === 13){
            $(this).next().click();
        }
    }).next().click(function(){
        var newtag = $("#jsTagName");
        $(".jsNewsTags").mazeMessageTags("add", newtag.val(), true);
        newtag.val(null);
    });

    $("button.jsIconDelete").click(function() {
        elem = this;
        dialog = $("#jsConfirmDeleteNews").modal({backdrop:"static", show:true});
        dialog.find(".jsButtonDelete").unbind("click").click(function(){
            $.ajax({
                url: elem.getAttribute("data") + "?format=json",
                type: "post",
                success: function(data) {
                    if(data.result === true) {
                        elem.disabled = true;
                        location = "<?= $this->url(array(), "news"); ?>";
                    }
                }
            });
            dialog.modal("hide");
        }).andSelf().find(".jsButtonCancel").click(function(){
            dialog.modal("hide");
        });
        return false;
    });

    $("#jsPublishNewsAndSendEmail").click(function(){
        var status = $("#jsMessageStatus button");
        var dialog = $("#jsPublishAndSend");
        dialog.modal({backdrop:"static", show:true})
              .find(".jsButtonSend").unbind("click").click(function(){
            $.ajax({
                url : "<?= $this->url(array(), "newsDetail") ?>?format=json",
                data: {
                    sentEmail: true,
                    status: "<?= Core_Model_NewsManager::STATUS_PUBLIC; ?>"
                },
                type: "post",
                success: function(data) {
                    setMessages(data, true);
                },
                beforeSend: function(){
                    status.each(function(){
                        $(this).removeClass("active").attr("disabled", true);
                        if (this.value === "<?= Core_Model_NewsManager::STATUS_PUBLIC ?>"){
                            $(this).addClass("active");
                        }
                    });
                },
                complete: function(){
                    status.each(function(){
                        this.disabled = false;
                    });
                }
            });
            $(this).modal("hide");
        });

        return;
    });

    $("#jsMessageStatus, #jsStickyStatus input").click(function(e){
        self = e.target || this;
        if ($(self).hasClass("active") || self.name === "" || typeof self.name === "undefined"){
            return true;
        }

        elements = $(self).parent().find("button,input");
        elements.each(function(){
            this.disabled = true;
        });

        postdata = {};
        postdata[self.name] = self.type === "checkbox" ? (self.checked ? 1 : 0) : self.value;

        $.ajax({
            url : "<?= $this->url(array(), "newsDetail") ?>?format=json",
            data: postdata,
            type: "post",
            success: function(data){
                setComboTooltip(data);
            },
            complete: function(){
                elements.each(function(){
                    this.disabled = false;
                });
            }
        });
    });

<? foreach ($this->form->tags->getElements() as $tag): ?>
    $(".jsNewsTags").mazeMessageTags("add", {id: "<?= $tag->getName(); ?>", value: "<?= $tag->getValue(); ?>"}, false);
<? endforeach; ?>

});

</script>
