<div class="row-fluid">
    <div class="span12">
        <div class="row-fluid ">
            <form class="span10" id="newsAdd" action="<?= $this->url(array(), "addNews"); ?>" method="post">
                <dl class="row-fluid">
                    <dt class="span3">
                    <label>
                        <?= $this->translate($this->form->title->getLabel()); ?>
                    </label>
                    </dt>
                    <dd class="span9">
                        <?= $this->form->title; ?>
                    </dd>
                </dl>
                <dl class="row-fluid">
                    <dt class="span3">
                    <label>
                        <?= $this->translate($this->form->content->getLabel()); ?>
                    </label>
                    </dt>
                    <dd class="span9">
                        <?= $this->form->content; ?>
                    </dd>
                </dl>

                <dl class="row-fluid">
                    <dt class="span3">
                    <label>
                        <?= $this->translate($this->form->teaser->getLabel()); ?>
                    </label>
                    </dt>
                    <dd class="span9">
                        <?= $this->form->teaser; ?>
                    </dd>
                </dl>

                <hr>

                <dl class="row-fluid">
                    <dt class="span3">
                    <label>
                        <?= $this->translate($this->form->sticky->getLabel()); ?>
                        <span class="icon-info-sign jsStickyInfo"></span>
                    </label>
                    </dt>
                    <dd class="span9">
                        <?= $this->form->sticky; ?>
                    </dd>
                </dl>

                <dl class="row-fluid">
                    <dt class="span3">
                    <label>
                        <?= $this->translate("Tags"); ?>
                    </label>
                    </dt>
                    <dd class="span9 jsNewsTags"></dd>
                </dl>

                <div class="row-fluid">
                    <button type="submit" class="btn btn-info" id="jsCancelButton"><?= $this->translate("cancel") ?></button>
                    <button type="submit"
                            name="status"
                            value="<?= Core_Model_NewsManager::STATUS_DRAFT ?>"
                            class="btn btn-info"><?= $this->translate("Save as Draft") ?>
                    </button>
                    <button type="submit"
                            name="status"
                            value="<?= Core_Model_NewsManager::STATUS_PUBLIC ?>"
                            class="btn btn-success pull-right"><?= $this->translate("Publish") ?>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
<div id="markupMessagesTags" style="display:none;">
    <div id="templateContainer">
        <div class="span11">
            <div class="cssTagsContainer "style="margin-right:-4px;z-index: 2;">
                <div id="jsTagContainer"></div>
                <div class="cssTagsInput input-append pull-left">
                    <input type="text" id="jsTagName" class="cssTagName span2">
                    <button type="button" class="btn btn-mini cssTagButtonAdd" id="jsTagButtonAdd">
                        <span class="icon-plus" style="opacity:0.7;"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id="templateTag">
        <span class="label" style="cursor: default; margin-right: 3px;">
            :name:
            <span class="cssTagButtonDelete jsTagButtonDelete">x</span>
        </span>
    </div>
    
</div>
<script type="text/javascript">
    $(document).ready(function() {
        $(".jsStickyInfo").tooltip({title: "<?= $this->translate("always kept at the upper position") ?>."});

        $(".jsNewsTags").mazeMessageTagsDummy();

        $("#jsCancelButton").click(function(e){
            e.preventDefault();
            this.disabled = true;
            location = "<?= $this->url(array(), "news"); ?>";
        });

        $("#jsTagName").keydown(function(e){
            keyCode = e.which || e.keyCode;
            if (keyCode === 13){
                $(this).next().click();
                e.preventDefault();
            }
        }).next().click(function(){
            var newtag = $("#jsTagName");
            $(".jsNewsTags").mazeMessageTagsDummy("add", newtag.val());
            newtag.val(null);
        });

        $("form#newsAdd").submit(function(e){
            var self = $(this);

            $("#jsTagContainer > span").each(function(){
                formName = "tags["+ $(this).attr("tagName")  +"]";
                $("<input \>", {
                    type : "hidden",
                    name :formName,
                    value: $(this).attr("tagName")
                }).appendTo(self);
            });
        });
        
        $("#content").keydown(function(e) {
            if((e.keyCode || e.which) === 9) {
                var start = this.selectionStart;

                $(this).val($(this).val().substring(0, start)
                            + "\t"
                            + $(this).val().substring(this.selectionEnd));
                this.selectionStart = this.selectionEnd = start + 1;
                e.preventDefault();
            }
        });
        
    <? foreach ($this->form->tags as $tag): ?>
        $(".jsNewsTags").mazeMessageTagsDummy("add", "<?= $tag->getValue(); ?>");
    <? endforeach; ?>
    });
    

(function($){
    var settings = {};
    var tagStack = {};

    $.fn.mazeMessageTagsDummy = function(args){
        var argVector = arguments;
        var selector  = this;

        var methods = {
            get:function(tagId) {
                if (typeof tagStack[tagId] === "object")
                    return tagStack[tagId];
                return false;
            },
            add:function(name, sendRequest){
                if (typeof methods.get(name) === "object" || $.trim(name) === "")
                    return false;
                if (typeof settings.container !== "object" || typeof settings.container[0] === "undefined")
                    settings.container = $(settings.container);

                tag = methods._buildTag(name);
                tag.attr("tagName", name);
                tag.find(settings.classButtonDelete).click(function(){
                    $(this).parent().remove();
                });

                settings.container.append(tagStack[name] = tag);
                tag.animate({opacity: .9,width: "toggle"}, settings.duration);
                return tag;
            },
            _buildTag: function(name){
                template = document.getElementById("templateTag").cloneNode(true);
                return $(template.innerHTML.replace(/\:name\:/, name)).hide();
            }
        };

        return(selector.each(function(index, element){
            if (typeof args === "string" && typeof methods[args] === "function"){
                return methods[args].apply(this, Array.prototype.slice.call(argVector, 1));
            }
            settings = $.extend($.fn.mazeMessageTagsDummy.defaults, typeof args === "object" ? args : {});
            $(document.getElementById("templateContainer").firstElementChild.cloneNode(true)).appendTo($(this));
            return this;
        }));
    };

    $.fn.mazeMessageTagsDummy.defaults = {
        classButtonDelete: ".jsTagButtonDelete",
        container: "#jsTagContainer:visible"
    };
})(jQuery);
</script>