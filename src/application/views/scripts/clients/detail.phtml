<? $this->headScript()->appendFile($this->baseUrl() . '/js/min/jquery.form.min.js') ?>

<div class="row-fluid" ng-controller="ClientController">
    <div class="span12">
        <div class="row-fluid text-left cssBoxCenter">
            <a ng-click="delete($event);"
               class="jsIconDeleteTxt btn" title="<?= $this->translate("delete"); ?>">
                <i class="icon-trash"></i> <?= $this->translate("delete"); ?>
            </a>
            <a <?= $this->toBool("client/status") ? "style=\"display:none;\"" : null; ?>
                href="<?= $this->url(array($this->html("client/_id"), $this->html("client/label")), "changeClientState") ?>"
                class="jsIconStateTxt btn inactive" title="<?= $this->translate('activate'); ?>">
                <i class="icon-minus-sign"></i>
                <?= $this->translate("activate"); ?>
            </a>
            <a <?= !$this->toBool("client/status") ? "style=\"display:none;\"" : null; ?>
                href="<?= $this->url(array($this->html("client/_id"), $this->html("client/label")), "changeClientState"); ?>"
                class="jsIconStateTxt btn" title="<?= $this->translate('deactivate'); ?>">
                <i class="icon-ok-sign"></i>
                <?= $this->translate("deactivate"); ?>
            </a>
            <a href="<?= $this->url(array(), 'switchToClient') ?>?clientId=<?= $this->html("clientId") ?>"
                title="<?= $this->translate('login as') ?> <?= $this->html("client/label"); ?>"class="btn">
                <span><?= $this->translate('login as')?> <?= $this->html("client/label"); ?></span>
            </a>
        </div>
        <div class="row-fluid text-right cssStatusText cssBigItem">
            <span <?= !$this->toBool("client/status") ? "style=\"display:none;\"" : null; ?>
                class="span11 jsClientStatus stat online">
                online
            </span>
            <span <?= $this->toBool("client/status") ? "style=\"display:none;\"" : null; ?>
                class="span11 jsClientStatus stat offline">
                offline
            </span>
        </div>
        <div class="row-fluid cssBoxCenter jsConfigClient">
            <div class="span10">
                <div class="row-fluid">
                    <form class="cssUserImage span2" id="jsAvatarUpload" enctype="multipart/form-data" method="post">
                        <a href="#" title="<?= $this->translate('change profile image') ?>">
                            <? if ($this->html('client/avatar') != ''): ?>
                                <img class="img-polaroid" name="avatar" src="<?= $this->url(array($this->html("clientId")), "avatar"); ?>" alt="<?= $this->translate('avatar') ?>">
                            <? else: ?>
                                <img class="img-polaroid" name="avatar" src="<?= $this->baseUrl() ?>/img/dummy_user_200.png" alt="<?= $this->translate('avatar') ?>">
                            <? endif; ?>
                        </a>
                        <?= $this->form->avatar; ?>
                    </form>
                    <div class="span6 offset1">
                        <? if ($this->client->html('company') != ''): ?>
                            <dl class="row-fluid cssBigItem">
                                <?= $this->form->company; ?>
                            </dl>
                            <div class="row-fluid">
                                <dl class="pull-left cssItemWithoutLabel">
                                    <?= $this->form->prename ?>
                                </dl>
                                <dl class="pull-left cssItemWithoutLabel">
                                    <?= $this->form->surname ?>
                                </dl>
                            </div>
                        <? else: ?>
                            <dl class="row-fluid">
                                <?= $this->form->company; ?>
                            </dl>
                            <div class="row-fluid">
                                <dl class="cssBigItem pull-left cssItemWithoutLabel">
                                    <?= $this->form->prename; ?>
                                </dl>
                                <dl class="cssBigItem pull-left cssItemWithoutLabel">
                                    <?= $this->form->surname; ?>
                                </dl>
                            </div>
                        <? endif; ?>
                        <div class="row-fluid">
                            <dl class="pull-left cssItemWithoutLabel">
                                <?= $this->form->street ?>
                            </dl>
                            <dl class="pull-left cssItemWithoutLabel">
                                <?= $this->form->houseNumber ?>
                            </dl>
                        </div>
                        <div class="row-fluid">
                            <dl class="pull-left cssItemWithoutLabel">
                                <?= $this->form->postcode ?>
                            </dl>
                            <dl class="pull-left cssItemWithoutLabel">
                                <?= $this->form->city ?>
                            </dl>
                        </div>
                    </div>
                </div>
                <div class="row-fluid">
                    <dl class="row-fluid">
                        <dt class="span3">
                        <label id="phone"><?= $this->translate('phone') ?></label>
                        </dt>
                        <dd class="span5 cssEditable">
                            <?= $this->form->phone ?>
                        </dd>
                    </dl>
                </div>
                <div class="row-fluid">
                    <dl class="row-fluid">
                        <dt class="span3">
                        <label id="fax"><?= $this->translate('fax') ?></label>
                        </dt>
                        <dd class="span5">
                            <?= $this->form->fax ?>
                        </dd>
                    </dl>
                </div>
                <div class="row-fluid">
                    <dl class="row-fluid">
                        <dt class="span3">
                        <label id="emailadress"><?= $this->translate('E-mail address:') ?></label>
                        </dt>
                        <dd class="span5">
                            <?= $this->form->email ?>
                        </dd>
                    </dl>
                </div>
                <div class="row-fluid" id="additionalFieldsContent">
                    <maze-additional fields="client" update="update($data)"></maze-additional>
                </div>
            </div>
        </div>
        <div class="row-fluid cssBoxCenter">
            <div class="span12">
                <ul class="nav nav-tabs unstyled" id="tabsClient">
                    <li id="tabTitleClientServices" class="active">
                        <a data-toggle="tab" href="#tabClientServices">
                            <?= $this->translate("Services"); ?> (<span class="jsTabServiceCount"><?= count($this->html('services')) ?></span>)
                        </a>
                    </li>
                    <li id="tabTitleClientNodes">
                        <a data-toggle="tab" href="#tabClientNodes">
                            <?= $this->translate("Nodes"); ?> (<span class="jsTabNodeCount"><?= count($this->nodes) ?></span>)
                        </a>
                    </li>
                    <li id="tabTitleClientDomains">
                        <a data-toggle="tab" href="#tabClientDomains">
                            <?= $this->translate("Domains"); ?> (<span class="jsTabDomainCount"><?= count($this->domains) ?></span>)
                        </a>
                    </li>
                    <li id="tabTitleClientAccess">
                        <a data-toggle="tab" href="#tabClientAccess">
                            <?= $this->translate("access data"); ?>
                        </a>
                    </li>
                    <li id="tabTitleClientLogs">
                        <a data-toggle="tab" href="#tabClientLogs">
                            <?= $this->translate("log"); ?>
                        </a>
                    </li>
                </ul>
                <div class="tab-content cssTabContentOuter row-fluid">
                    <div class="active tab-pane" id="tabClientServices">
                        <?= $this->render('clients/tabs/services.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabClientNodes">
                        <?= $this->render('clients/tabs/nodes.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabClientDomains">
                        <?= $this->render('clients/tabs/domains.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabClientAccess">
                        <?= $this->render('clients/tabs/access.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabClientLogs">
                        <?= $this->render('clients/tabs/logs.phtml'); ?>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div>
        <script type="text/ng-template" id="ModalDeleteClient.html">
            <div class="modal-header" ng-if="modal.title;">
                <h3 class="modal-title">{{modal.title}}</h3>
            </div>
            <div class="modal-body" ng-if="modal.body;">
                <p>{{modal.body}}</p>
            </div>
            <div class="modal-footer">
                <button class="btn" ng-click="dismiss();"><?= $this->translate("cancel"); ?></button>
                <button class="btn btn-primary" ng-click="confirm();"><?= $this->translate("ok"); ?></button>
            </div>
        </script>
    </div>
</div>
<?= $this->render('shared/passwordStrength.phtml'); ?>

<script type="text/javascript">
    var app = angular.module('maze');

    app.controller('ClientController', ['$scope', '$modal', '$filter', 'clientsService', 'modulesService', function($scope, $modal, $filter, clientsService, modulesService){
        $scope.clientId = '<?= $this->html("client/_id"); ?>';

        clientsService.get($scope.clientId).success(function(data) {
            $scope.client = data;

            initServices()
        }).error(function(data) {
            //@todo error handling
        });

        $scope.update = function(data){
            return clientsService.set($scope.client._id, data).success(function(client){
                $scope.client = client;
            });
        };

        $scope.delete = function(event){
            modal().result.then(function(){
                clientsService.delete($scope.client._id).success(function(response, status){
                    if (status === 202) {
                        return location.href = "<?= $this->url(array(), "clients"); ?>";
                    }
                });
            });

            return event.preventDefault();
        };

        $scope.changeState = function(event){
            $scope.client.changeState = true;
            $scope.update($scope.client);
            event.preventDefault();
        };

        var modal = function(){
            return($modal.open({
                templateUrl: "ModalDeleteClient.html",
                controller : function ($scope, $modalInstance){
                    $scope.modal = {
                        body: "<?= $this->translate("Shall the client really be deleted?"); ?>"
                    };
                    $scope.confirm = $modalInstance.close;
                    $scope.dismiss = function (){
                        $modalInstance.dismiss("cancel");
                    };
                }
            }));
        };

        var initServices = function() {
            $scope.loadServices = true;
            $scope.services = {selected: ''};

            modulesService.list().success(function(data){
                $scope.services.all = data;
                buildAvailableServices();
                $scope.loadServices = false;
            }).error(function() {
                $scope.loadServices = false;
                buildAvailableServices();
                $scope.errAddService = ['Failed to load services'];
            });

            $scope.addService = function(serviceName) {
                $scope.errAddService = [];
                var service = $filter('filter')($scope.services.available, {name: serviceName})[0];
                if(!service || !service._id) {
                    return false;
                }

                var updateData = {services: {}};
                updateData.services[serviceName] = true;

                clientsService.update($scope.client._id, $.param(updateData)).success(function(data) {
                    $scope.client.services = data.client.services;
                    $scope.services.selected = '';
                    buildAvailableServices();

                    setTimeout(function() {
                        $('#tabServices-' + serviceName).tab('show');
                    }, 0);
                }).error(function() {
                    $scope.errAddService.push('<?= $this->translate('Failed') ?>');
                });
            };

            $scope.modalRemoveClientService = function(service) {
                if(!service) {
                    return false;
                }

                var modalInstance = $modal.open({
                    templateUrl: 'modalRemoveClientService.html',
                    controller: 'modalRemoveClientService',
                    resolve: {
                        service: function () {return service},
                        client: function () {return $scope.client}
                    }
                });

                modalInstance.result.then(function (services) {
                    $scope.client.services = services;
                    $('#tabServicesList li a:first').tab('show');
                    buildAvailableServices();
                });
            };

            var buildAvailableServices = function() {
                var availableServices = [];
                angular.forEach($scope.services.all, function(service) {
                    if(service.name && !$scope.client.services || !$scope.client.services[service.name]) {
                        availableServices.push(service);
                    }
                });

                if(!availableServices.length) {
                    $scope.services.available = [{label: '<?= $this->translate('No services available') ?>', name:''}];
                } else {
                    $scope.services.available = [{label: '<?= $this->translate('Add new service') ?>', name:''}];
                }

                $scope.services.available = $scope.services.available.concat(availableServices);
            };
        }

    }]);

    $(document).ready(function() {
        $('.selectpicker').selectpicker();
        
        $('.jsConfigClient .jsEditable, #tabContentClientAccess .jsEditable').mazeEditable('<?= $this->url(array(), 'clientDetail') ?>?format=json', $.extend({
                onedit: function(data) {
                    $(".jsChangePassword:visible").find(".jsPasswordCancel").click();
                    $(".jsAdditionalControls:visible").find(".jsAdditionalCancel").click();
                }
            }, mazeEditableOptions)
        );

        $(".jsPasswordTrigger, .jsPasswordCancel").click(function(event){
            if (event.timeStamp === 0) return false;
            $("[type='password']").attr("disabled", false);
            $(".jsPasswordContainer").keypress(function(event){
                if (event.keyCode === 13 || event.which === 13){
                    event.preventDefault();
                }
            }).toggle();
            return false;
        }).filter(".jsPasswordCancel").click(function(event){
            if (event.timeStamp === 0) return false;
            $("#password, #confirmPassword").val(null).attr("disabled", true);
            resetTooltips();
        });
        
        $('.cssUserImage > a').click(function(){
            if ($(".jsChangePassword").is(":visible"))
                $(".jsPasswordCancel").click();
            resetTooltips();
            $('.jsUserAvatar[type=file]').click();
            return false;
        });
        $('.jsUserAvatar').change(function(){
            $("#jsAvatarUpload").submit();
        });

        $(".jsEditable").click(function(){
            if ($('.jsPasswordFields').is(':visible')){
                $('.jsTogglePassword').click();
            }
        });

        $("#jsClientForm").submit(function(){
            $("[type='password']").popover("destroy");
            $.ajax({
                url:  this.action+ "?format=json",
                type: this.method,
                data: $(this).serializeArray(),
                success: function(data){
                    if (data.result){
                        data.successes.push("<?= $this->translate('The password has been changed') ?>");
                        setTimeout(function(){
                            if ($(".jsChangePassword").is(":visible"))
                                $(".jsPasswordCancel").click();
                            resetTooltips();
                        }, 4000);
                    }

                    setTooltips(data, "#password");
                }
            });
            
            return false;
        }).keyup(function(event){
            if (event.keyCode === 13 || event.which === 13){
                $(this).submit();
            }
        });

        $("#jsAvatarUpload").ajaxForm({            
            url: "<?= $this->url(array(), 'clientDetail') ?>?format=json",
            type: this.method,
            success: function(data) {
                if (typeof data === "string") data = eval('(' + data + ')');
                if (!$.isEmptyObject(data.formErrors) && !$.isEmptyObject(data.formErrors.avatar)){
                    setErrorTooltip(data.formErrors.avatar, "#jsAvatarUpload");
                } else if (!$.isEmptyObject(data.client) && data.client.avatar){
                    image = '<?= $this->url(array($this->clientId), "avatar"); ?>';
                    $("#jsAvatarUpload img[name=avatar]").attr('src', image +'?'+new Date().getTime());
                }
                
                setMessages(data);
            },
            beforeSubmit: function(arr, $form, options) {
                $.each(arr, function(index, element){
                    if (element.type === "file" && element.value === ""){
                        arr[index] = [];
                    }
                });
            }
        });

        setPasswordStrength("#password", {placement: "left"});

        if ($.browser.msie){
            $("#avatar").show().css({
                borderColor: "transparent",
                borderStyle: "solid",
                borderWidth: "35px 0 0",
                width : $(".cssUserImage a").width(),
                height: $(".cssUserImage a").height()
            }).offset($('.cssUserImage a').offset());
            $('.cssUserImage a').unbind("click");
        }

    });
</script>
