<div class="row-fluid" ng-controller="DomainController">
    <span ng-show="loadDomain">
        <img src="<?= $this->baseUrl() ?>/img/js/loading.gif" title="<?= $this->translate('Loading...') ?>">
        <?= $this->translate('Loading...') ?>
    </span>

    <span ng-show="!loadDomain && !domain">
        <?= $this->translate('Failed to load domain') ?>
    </span>

    <div id="domainEditContent" ng-show="domain">
        <div class="row-fluid text-left cssBoxCenter">
            <button ng-click="modalDeleteDomain();" ng-disabled="!domain" class="jsIconDeleteTxt btn" title="<?= $this->translate("delete domain"); ?>">
                <i class="icon-trash"></i>
                <?= $this->translate("delete"); ?>
            </button>
        </div>
        <div class="row-fluid cssBoxCenter">
            <div class="span10">
                <div class="row-fluid">
                    <div class="cssUserImage span2">
                        <img name="avatar" class="img-polaroid"
                             src="<?= $this->baseUrl() ?>/img/dummy_domain_200.png"
                             alt="<?= $this->translate('avatar') ?>">
                    </div>

                    <div class="span9 offset1">
                        <maze-dl-wrapper dt-class="span3" dd-class="span9 cssBigItem" class="row-fluid">
                            {{domain.name}}
                        </maze-dl-wrapper>

                        <maze-dl-wrapper label="<?= $this->translate('Client') ?>" dt-class="span3" dd-class="span9">
                            <a ng-if="domain.ownerData.url" href="{{domain.ownerData.url}}">
                                {{domain.ownerData.label}}
                            </a>
                            <span ng-if="!domain.ownerData.url">
                                {{domain.ownerData.label}}
                            </span>
                        </maze-dl-wrapper>

                        <maze-dl-wrapper label="<?= $this->translate('procurement place') ?>" dt-class="span3" dd-class="span9">
                            <span editable-text="domain.procurement" ng-class="{cssColorGray: !domain.procurement}" onaftersave="update();">
                                {{domain.procurement || "<?= $this->translate('procurement place') ?>"}}
                            </span>
                        </maze-dl-wrapper>
                    </div>
                </div>
                <div class="row-fluid" id="additionalFieldsContent">
                    <maze-additional fields="domain" update="update($data)"></maze-additional>
                </div>
            </div>
        </div>
        <div class="row-fluid cssBoxCenter">
            <div class="span12">
                <ul class="nav nav-tabs unstyled" id="tabsDomain">
                    <li id="tabTitleDomainServices" class="active">
                        <a data-toggle="tab" href="#tabDomainServices">
                            <?= $this->translate("Services"); ?> (<span class="jsTabServiceCount"><?= count($this->html('services')) ?></span>)
                        </a>
                    </li>
                    <li id="tabTitleDomainClients">
                        <a data-toggle="tab" href="#tabDomainNodes">
                            <?= $this->translate("Nodes"); ?> (<span class="jsTabNodeCount"><?= count($this->nodes) ?></span>)
                        </a>
                    </li>
                    <li id="tabTitleDomainLogs">
                        <a data-toggle="tab" href="#tabDomainLogs">
                            <?= $this->translate("log"); ?>
                        </a>
                    </li>
                </ul>

                <div class="tab-content cssTabContentOuter row-fluid">
                    <div class="active tab-pane" id="tabDomainServices">
                        <?= $this->render('domains/tabs/services.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabDomainNodes">
                        <?= $this->render('domains/tabs/nodes.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabDomainLogs">
                        <?= $this->render('domains/tabs/logs.phtml'); ?>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script type="text/ng-template" id="modalDomainDelete.html">
    <div class="modal-body">
        <p>
            <?= $this->translate("Shall the domain really be deleted?"); ?>
        </p>

        <alert ng-repeat="error in errMessages" type="'danger'">{{error}}</alert>
    </div>
    <div class="modal-footer">
        <button class="btn" ng-click="cancel();"><?= $this->translate("cancel"); ?></button>
        <button class="btn btn-primary" ng-click="ok();"><?= $this->translate("ok"); ?></button>
    </div>
</script>

<script type="text/javascript">
    var app = angular.module('maze');

    app.controller('DomainController', ['$scope', '$modal', '$filter', 'domainsService', 'modulesService', function($scope, $modal, $filter, domainsService, modulesService){
        $scope.domainId = '<?= $this->domainId; ?>';
        $scope.client = {};

        $scope.loadDomain = true;
        domainsService.get($scope.domainId).success(function(data) {
            $scope.domain = data;
            $scope.loadDomain = false;

            initServices();
        }).error(function(data, code) {
            if(code === 404) {
                window.location = '<?= $this->url(array(), 'domains') ?>';
            }
            $scope.loadDomain = false;
        });

        $scope.update = function(data){
            return domainsService.update($scope.domain._id, (data || $scope.domain)).success(function(response){
                $scope.domain = response;
            });
        };

        $scope.modalDeleteDomain = function() {
            var modalInstance = $modal.open({
                templateUrl: 'modalDomainDelete.html',
                controller: 'modalDeleteDomain',
                resolve: {
                    domainId: function () {return $scope.domainId}
                }
            });

            modalInstance.result.then(function (code) {
                if (code === 200) {
                    return location.href = "<?= $this->url(array(), "domains"); ?>";
                }
            });
        };

        var initServices = function() {
            $scope.loadServices = true;
            $scope.services = {selected: '', all: []};

            modulesService.list().success(function(data){
                $scope.services.all = data;
                buildAvailableServices();
                $scope.loadServices = false;
            }).error(function() {
                $scope.loadServices = false;
                buildAvailableServices();
                $scope.errAddService = ['Failed to load services'];
            });

            $scope.addService = function(serviceName) {
                $scope.errAddService = [];
                var service = $filter('filter')($scope.services.available, {name: serviceName})[0];
                if(!service || !service._id) {
                    return false;
                }

                var updateData = {services: {}};
                updateData.services[serviceName] = true;

                domainsService.update($scope.domain._id, $.param(updateData)).success(function(data) {
                    $scope.domain.services = data.domain.services;
                    $scope.services.selected = '';
                    buildAvailableServices();

                    setTimeout(function() {
                        $('#tabServices-' + serviceName).tab('show');
                    }, 0);
                }).error(function() {
                    $scope.errAddService.push('<?= $this->translate('Failed') ?>');
                });
            };

            $scope.modalRemoveDomainService = function(service) {
                if(!service) {
                    return false;
                }

                var modalInstance = $modal.open({
                    templateUrl: 'modalRemoveDomainService.html',
                    controller: 'modalRemoveDomainService',
                    resolve: {
                        service: function () {return service},
                        domain: function () {return $scope.domain}
                    }
                });

                modalInstance.result.then(function (services) {
                    $scope.domain.services = services;
                    $('#tabServicesList li a:first').tab('show');
                    buildAvailableServices();
                });
            };

            var buildAvailableServices = function() {
                if(!$scope.domain) {
                    return false;
                }

                var availableServices = [];
                angular.forEach($scope.services.all, function(service) {
                    if(service.name && (!$scope.domain.services || !$scope.domain.services[service.name])) {
                        availableServices.push(service);
                    }
                });

                if(!availableServices.length) {
                    $scope.services.available = [{label: '<?= $this->translate('No services available') ?>', name:''}];
                } else {
                    $scope.services.available = [{label: '<?= $this->translate('Add new service') ?>', name:''}];
                }

                $scope.services.available = $scope.services.available.concat(availableServices);
            };
        };

    }]);
</script>
