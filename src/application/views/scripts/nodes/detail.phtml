<div class="row-fluid" ng-controller="NodeController">
    <span id="nodeEditLoading" ng-show="loadNode">
        <img src="<?= $this->baseUrl() ?>/img/js/loading.gif" title="<?= $this->translate('Loading...') ?>">
        <?= $this->translate('Loading...') ?>
    </span>

    <span id="nodeEditLoadingFailed" ng-show="!loadNode && !node">
        <?= $this->translate('Failed to load node') ?>
    </span>

    <div id="nodeEditContent"  ng-show="node">
        <div class="row-fluid text-left cssBoxCenter">
            <a ng-click="modalDeleteNode();" class="jsIconDeleteTxt btn" ng-class="{disabled: !node}" title="<?= $this->translate("delete node"); ?>">
                <i class="icon-trash"></i> <?= $this->translate("delete"); ?>
            </a>
        </div>
        <div class="row-fluid cssBoxCenter">
            <div class="span10">
                <div class="row-fluid">
                    <div class="cssUserImage span2">
                        <img class="img-polaroid" name="avatar" src="<?= $this->baseUrl() ?>/img/{{selected.image}}" alt="<?= $this->translate('avatar') ?>">
                    </div>
                    <div class="span9 offset1">
                        <maze-dl-wrapper dt-class="span3" dd-class="span9 cssBigItem" class="row-fluid">
                            {{node.name}}
                        </maze-dl-wrapper>
                        <maze-dl-wrapper label="<?= $this->translate('ip address') ?>" dt-class="span3" dd-class="span9">
                            {{node.ipAddress}}
                        </maze-dl-wrapper>
                        <maze-dl-wrapper label="<?= $this->translate('Node Type') ?>" dt-class="span3" dd-class="span9">
                            <a href="#" editable-select="node.nodetype" e-ng-options="type.value as type.name for type in nodetypes" e-ng-change="changeNodeType($data);" oncancel="changeNodeType();" onaftersave="update();">
                                {{selected.name || "<?= $this->translate("Assign a server type"); ?>"}}
                            </a>
                        </maze-dl-wrapper>
                    </div>
                </div>
                <div class="row-fluid" id="additionalFieldsContent">
                    <maze-additional fields="node" update="update($data)"></maze-additional>
                </div>
            </div>
        </div>
        <div class="row-fluid cssBoxCenter">
            <div class="span12">
                <ul class="nav nav-tabs unstyled" id="tabsNode">
                    <li id="tabTitleNodeServices" class="active">
                        <a data-toggle="tab" href="#tabNodeServices">
                            <?= $this->translate("Service"); ?> (<span class="jsTabServiceCount"><?= count($this->html('services')) ?></span>) 
                        </a>
                    </li>
                    <li id="tabTitleNodeClients">
                        <a data-toggle="tab" href="#tabNodeClients">
                            <?= $this->translate("Clients"); ?> (<span class="jsTabClientCount"><?= count($this->clients) ?></span>)
                        </a>
                    </li>
                    <li id="tabTitleNodeDomains">
                        <a data-toggle="tab" href="#tabNodeDomains">
                            <?= $this->translate("Domains"); ?> (<span class="jsTabDomainCount"><?= count($this->domains) ?></span>)
                        </a>
                    </li>
                    <li id="tabTitleNodeLogs">
                        <a data-toggle="tab" href="#tabNodeLogs">
                            <?= $this->translate("log"); ?>
                        </a>
                    </li>
                </ul>
                <div class="tab-content cssTabContentOuter row-fluid">
                    <div class="active tab-pane" id="tabNodeServices">
                        <?= $this->render('nodes/tabs/services.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabNodeClients">
                        <?= $this->render('nodes/tabs/clients.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabNodeDomains">
                        <?= $this->render('nodes/tabs/domains.phtml'); ?>
                    </div>
                    <div class="tab-pane cssTabContentAll" id="tabNodeLogs">
                        <?= $this->render('nodes/tabs/logs.phtml'); ?>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script type="text/ng-template" id="modalDeleteNode.html">
    <div class="modal-body">
        <p>
            <?= $this->translate('Shall the node really be deleted?') ?>
        </p>

        <alert ng-repeat="error in errMessages" type="'danger'">{{error}}</alert>
    </div>
    <div class="modal-footer">
        <button class="btn" ng-click="cancel();"><?= $this->translate("cancel"); ?></button>
        <button class="btn btn-primary" ng-click="ok();"><?= $this->translate("ok"); ?></button>
    </div>
</script>

<script type="text/javascript">
    var app = angular.module('maze');

    app.controller('NodeController', ['$scope', '$modal', '$filter', 'nodesService', 'modulesService', function($scope, $modal, $filter, nodesService, modulesService){
        $scope.nodetypes = [
            {name:"<?= $this->translate("Virtual Server"); ?>", value: "virtual", image: "dummy_vm_200.png"},
            {name:"<?= $this->translate("Cloud Server"); ?>‎", value: "cloud", image: "dummy_cloud_200.png"},
            {name:"<?= $this->translate("Dedicated Server"); ?>‎", value: "dedicated", image: "dummy_server_200.png"}
        ];
        $scope.nodeId = '<?= $this->html("node/_id"); ?>';
        $scope.selected  = {image: "dummy_node_200.png"};

        $scope.update = function(data){
            return nodesService.set($scope.node._id, data || $scope.node).success(function(node){
                $scope.node = node;
            });
        };

        $scope.loadNode = true;
        nodesService.get($scope.nodeId).success(function(data) {
            $scope.node = data;
            $scope.loadNode = false;

            initNodeTypeSelect();
            initServices();
        }).error(function(data, code) {
            if(code === 404) {
                window.location = '<?= $this->url(array(), 'nodes') ?>';
            }
            $scope.loadNode = false;
        });

        $scope.modalDeleteNode = function() {
            var modalInstance = $modal.open({
                templateUrl: 'modalDeleteNode.html',
                controller: 'modalDeleteNode',
                resolve: {
                    nodeId: function () {return $scope.nodeId}
                }
            });

            modalInstance.result.then(function (code) {
                if (code === 200) {
                    return location.href = "<?= $this->url(array(), "nodes"); ?>";
                }
            });
        };

        var initNodeTypeSelect = function() {
            $scope.$watch("node.nodetype", function(option){
                $scope.changeNodeType(option);
            });

            $scope.changeNodeType = function(option){
                option = (option || $scope.node.nodetype);
                select = $filter("filter")($scope.nodetypes, {value: (option)})[0];
                if (option && select && select.value) {
                    $scope.selected = select;
                }
            };
        };

        var initServices = function() {
            $scope.loadServices = true;
            $scope.services = {selected: '', all: []};

            modulesService.list().success(function(data){
                $scope.services.all = data;
                buildAvailableServices();
                $scope.loadServices = false;
            }).error(function() {
                $scope.loadServices = false;
                buildAvailableServices();
                $scope.errAddService = ['Failed to load services'];
            });

            $scope.addService = function(serviceName) {
                $scope.errAddService = [];
                var service = $filter('filter')($scope.services.available, {name: serviceName})[0];
                if(!service || !service._id) {
                    return false;
                }

                var updateData = {services: {}};
                updateData.services[serviceName] = true;

                nodesService.update($scope.node._id, $.param(updateData)).success(function(data) {
                    $scope.node.services = data.node.services;
                    $scope.services.selected = '';
                    buildAvailableServices();

                    setTimeout(function() {
                        $('#tabServices-' + serviceName).tab('show');
                    }, 0);
                }).error(function() {
                    $scope.errAddService.push('<?= $this->translate('Failed') ?>');
                });
            };

            $scope.modalRemoveNodeService = function(service) {
                if(!service) {
                    return false;
                }

                var modalInstance = $modal.open({
                    templateUrl: 'modalRemoveNodeService.html',
                    controller: 'modalRemoveNodeService',
                    resolve: {
                        service: function () {return service},
                        node: function () {return $scope.node}
                    }
                });

                modalInstance.result.then(function (services) {
                    $scope.node.services = services;
                    $('#tabServicesList li a:first').tab('show');
                    buildAvailableServices();
                });
            };

            var buildAvailableServices = function() {
                if(!$scope.node) {
                    $scope.services.available = [{label: '<?= $this->translate('No services available') ?>', name:''}];
                    return false;
                }

                var availableServices = [];
                angular.forEach($scope.services.all, function(service) {
                    if(service.name && (!$scope.node.services || !$scope.node.services[service.name])) {
                        availableServices.push(service);
                    }
                });

                if(!availableServices.length) {
                    $scope.services.available = [{label: '<?= $this->translate('No services available') ?>', name:''}];
                } else {
                    $scope.services.available = [{label: '<?= $this->translate('Add new service') ?>', name:''}];
                }

                $scope.services.available = $scope.services.available.concat(availableServices);
            };
        };
    }]);
</script>
