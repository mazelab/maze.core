// Generated by CoffeeScript 1.7.1
(function() {
  var controllers;

  controllers = angular.module('maze.controllers', []);

  controllers.controller('clientListController', [
    '$scope', function($scope) {
      var initBreadCrumb;
      $scope.client = [];
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html('<li><a href="/">Dashboard</a><span class="divider">/</span></li><li class="active">Clients</li>');
      };
      return initBreadCrumb();
    }
  ]);

  controllers.controller('clientNewController', [
    '$scope', function($scope) {
      var initBreadCrumb;
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html('<li><a href="/">Dashboard</a><span class="divider">/</span></li><li><a href="#/">Clients</a><span class="divider">/</span></li><li class="active">new</li>');
      };
      $scope.cancel = function() {
        return window.location = '#/';
      };
      return initBreadCrumb();
    }
  ]);

  controllers.controller('domainModalRemoveService', [
    '$scope', '$modalInstance', 'service', 'domain', 'domainsService', function($scope, $modalInstance, service, domain, domainsService) {
      $scope.service = service;
      $scope.domain = domain;
      $scope.ok = function() {
        var updateData;
        $scope.errMessages = [];
        updateData = {
          services: {}
        };
        updateData.services[service.name] = false;
        return domainsService.update(domain._id, $.param(updateData)).success(function(data) {
          return $modalInstance.close(data.domain.services);
        }).error(function() {
          return $scope.errMessages.push('Failed');
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]);

  controllers.controller('domainModalDelete', [
    '$scope', '$modalInstance', 'domainsService', 'domainId', function($scope, $modalInstance, domainsService, domainId) {
      $scope.ok = function() {
        $scope.errMessages = [];
        return domainsService["delete"](domainId).success(function(data, code) {
          return $modalInstance.close(code);
        }).error(function() {
          return $scope.errMessages.push('Failed');
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]);

  controllers.controller('domainListController', [
    '$scope', function($scope) {
      var initBreadCrumb;
      $scope.domains = [];
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html('<li><a href="/">Dashboard</a><span class="divider">/</span></li><li class="active">Domains</li>');
      };
      return initBreadCrumb();
    }
  ]);

  controllers.controller('domainEditController', [
    '$scope', '$filter', '$modal', '$q', 'domainsService', '$routeParams', 'modulesService', 'logsService', 'nodesService', function($scope, $filter, $modal, $q, domainsService, $routeParams, modulesService, logsService, nodesService) {
      var initBreadCrumb, initServices;
      $scope.domainId = $routeParams.domainId;
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html('<li><a href="/">Dashboard</a><span class="divider">/</span></li><li><a href="#/">Domains</a><span class="divider">/</span></li><li class="active">' + $scope.domain.name + '</li>');
      };
      $scope.updateAdditional = function(data) {
        return domainsService.update($scope.domainId, $.param(data)).success(function(data) {
          var _ref;
          if (((_ref = data.domain) != null ? _ref.additionalFields : void 0) != null) {
            return $scope.domain.additionalFields = data.domain.additionalFields;
          }
        });
      };
      $scope.loadLogs = true;
      logsService.list({
        domain: $scope.domainId,
        limit: 10
      }).success(function(data) {
        $scope.logs = data;
        return $scope.loadLogs = false;
      }).error(function(data) {
        $scope.logs = null;
        return $scope.loadLogs = false;
      });
      $scope.loadNodes = true;
      nodesService.list({
        domain: $scope.domainId,
        limit: 10
      }).success(function(data) {
        $scope.nodes = data;
        return $scope.loadNodes = false;
      }).error(function() {
        $scope.nodes = null;
        return $scope.loadNodes = false;
      });
      $scope.loadDomain = true;
      domainsService.get($scope.domainId).success(function(data) {
        $scope.domain = data;
        $scope.loadDomain = false;
        initBreadCrumb();
        return initServices();
      }).error(function(data, code) {
        if (code === 404) {
          window.location = '#/';
        }
        return $scope.loadDomain = false;
      });
      $scope.modalDeleteDomain = function() {
        var modalInstance, modalProperties;
        modalProperties = {
          templateUrl: '/partials/admin/domains/modal/delete.html',
          controller: 'domainModalDelete',
          resolve: {
            domainId: function() {
              return $scope.domainId;
            }
          }
        };
        modalInstance = $modal.open(modalProperties);
        return modalInstance.result.then(function(code) {
          if (code === 200) {
            return window.location = "#/";
          }
        });
      };
      $scope.updateProperty = function(property, data) {
        var updateData;
        if (!(property || data)) {
          return false;
        }
        updateData = {};
        updateData[property] = data;
        return domainsService.update($scope.domainId, $.param(updateData))["catch"](function(request) {
          var messages, _ref;
          if ((((_ref = request.data) != null ? _ref.errForm : void 0) != null) && request.data.errForm[property]) {
            angular.forEach(request.data.errForm[property], function(value, key) {
              var messages;
              if (typeof messages !== "undefined" && messages !== null) {
                messages = messages + ";";
              }
              return messages = messages + value;
            });
          } else {
            messages = false;
          }
          return $q.reject(messages);
        });
      };
      return initServices = function() {
        var buildAvailableServices;
        $scope.loadServices = true;
        $scope.services = {
          selected: '',
          all: []
        };
        modulesService.list().success(function(data) {
          $scope.services.all = data;
          buildAvailableServices();
          return $scope.loadServices = false;
        }).error(function() {
          $scope.loadServices = false;
          buildAvailableServices();
          return $scope.errAddService = ['Failed to load services'];
        });
        $scope.addService = function(serviceName) {
          var service, updateData;
          $scope.errAddService = [];
          service = $filter('filter')($scope.services.available, {
            name: serviceName
          })[0];
          if ((service != null ? service._id : void 0) == null) {
            return false;
          }
          updateData = {
            services: {}
          };
          updateData.services[serviceName] = true;
          return domainsService.update($scope.domain._id, $.param(updateData)).success(function(data) {
            $scope.domain.services = data.domain.services;
            $scope.services.selected = '';
            buildAvailableServices();
            return setTimeout(function() {
              return $('#tabServices-' + serviceName).tab('show');
            }, 0);
          }).error(function() {
            return $scope.errAddService.push('Failed');
          });
        };
        $scope.modalRemoveDomainService = function(service) {
          var modalInstance, modalProperties;
          if (!service) {
            return false;
          }
          modalProperties = {
            templateUrl: '/partials/admin/domains/modal/removeService.html',
            controller: 'domainModalRemoveService',
            resolve: {
              service: function() {
                return service;
              },
              domain: function() {
                return $scope.domain;
              }
            }
          };
          modalInstance = $modal.open(modalProperties);
          return modalInstance.result.then(function(services) {
            $scope.domain.services = services;
            $('#tabServicesList li a:first').tab('show');
            return buildAvailableServices();
          });
        };
        return buildAvailableServices = function() {
          var availableServices;
          if ($scope.domain == null) {
            return false;
          }
          availableServices = [];
          angular.forEach($scope.services.all, function(service) {
            var _ref;
            if ((service.name != null) && (((_ref = $scope.domain.services) != null ? _ref[service.name] : void 0) == null)) {
              return availableServices.push(service);
            }
          });
          if (!availableServices.length) {
            $scope.services.available = [
              {
                label: 'No services available',
                name: ''
              }
            ];
          } else {
            $scope.services.available = [
              {
                label: 'Add new service',
                name: ''
              }
            ];
          }
          return $scope.services.available = $scope.services.available.concat(availableServices);
        };
      };
    }
  ]);

  controllers.controller('domainNewController', [
    '$scope', '$filter', 'domainsService', 'clientsService', function($scope, $filter, domainsService, clientsService) {
      var initBreadCrumb;
      $scope.clients = $scope.domain = $scope.selected = {};
      $scope.changeclient = function(option) {
        return $scope.selected = $filter("filter")($scope.clients, {
          _id: option
        })[0];
      };
      clientsService.list().success(function(clients) {
        return $scope.clients = clients || {};
      });
      $scope.createDomain = function() {
        $scope.formErrors = [];
        return domainsService.create($.param($scope.domain)).success(function(data, status, headers) {
          if (headers('location')) {
            return window.location = headers('location');
          }
          return location.href = "#/";
        }).error(function(data) {
          if (data.formErrors != null) {
            return $scope.formErrors = data.formErrors;
          }
        });
      };
      $scope.cancelCreation = function() {
        return window.location = '#/';
      };
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html('<li><a href="/">Dashboard</a><span class="divider">/</span></li><li><a href="#/">Domains</a><span class="divider">/</span></li><li class="active">new</li>');
      };
      return initBreadCrumb();
    }
  ]);

  controllers.controller('nodeEditController', [
    '$scope', '$filter', '$modal', '$q', '$routeParams', 'nodesService', 'logsService', 'modulesService', 'clientsService', 'domainsService', function($scope, $filter, $modal, $q, $routeParams, nodesService, logsService, modulesService, clientsService, domainsService) {
      var initBreadCrumb, initNodeTypeSelect, initServices;
      $scope.nodeId = $routeParams.nodeId;
      $scope.nodetypes = [
        {
          name: "Virtual Server",
          value: "virtual",
          image: "dummy_vm_200.png"
        }, {
          name: "Cloud Server",
          value: "cloud",
          image: "dummy_cloud_200.png"
        }, {
          name: "Dedicated Server‎",
          value: "dedicated",
          image: "dummy_server_200.png"
        }
      ];
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html('<li><a href="/">Dashboard</a><span class="divider">/</span></li><li><a href="#/">Nodes</a><span class="divider">/</span></li><li class="active">' + $scope.node.name + '</li>');
      };
      $scope.updateAdditional = function(data) {
        return nodesService.update($scope.nodeId, $.param(data)).success(function(data, code) {
          if (code === 200 && (data.node.additionalFields != null)) {
            return $scope.node.additionalFields = data.node.additionalFields;
          }
        });
      };
      $scope.loadNode = true;
      nodesService.get($scope.nodeId).success(function(data) {
        $scope.node = data;
        $scope.loadNode = false;
        initBreadCrumb();
        initServices();
        return initNodeTypeSelect();
      }).error(function(data, code) {
        if (code === 404) {
          window.location = '#/';
        }
        return $scope.loadNode = false;
      });
      initNodeTypeSelect = function() {
        $scope.$watch("node.nodetype", function(option) {
          return $scope.changeNodeType(option);
        });
        return $scope.changeNodeType = function(option) {
          var select;
          option = option || $scope.node.nodetype;
          select = $filter("filter")($scope.nodetypes, {
            value: option
          })[0];
          if (option && ((select != null ? select.value : void 0) != null)) {
            return $scope.selected = select;
          }
        };
      };
      $scope.loadLogs = true;
      logsService.list({
        node: $scope.nodeId,
        limit: 10
      }).success(function(data) {
        $scope.logs = data;
        return $scope.loadLogs = false;
      }).error(function() {
        $scope.loadLogs = false;
        return $scope.logs = null;
      });
      $scope.loadClients = true;
      clientsService.list({
        node: $scope.nodeId,
        limit: 10
      }).success(function(data) {
        $scope.clients = data;
        return $scope.loadClients = false;
      }).error(function() {
        $scope.clients = null;
        return $scope.loadClients = false;
      });
      $scope.loadDomains = true;
      domainsService.list({
        node: $scope.nodeId,
        limit: 10
      }).success(function(data) {
        $scope.domains = data;
        return $scope.loadDomains = false;
      }).error(function() {
        $scope.domains = null;
        return $scope.loadDomains = false;
      });
      $scope.modalDelete = function() {
        var modalInstance, modalProperties;
        modalProperties = {
          templateUrl: '/partials/admin/nodes/modal/delete.html',
          controller: 'nodeModalDelete',
          resolve: {
            nodeId: function() {
              return $scope.nodeId;
            }
          }
        };
        modalInstance = $modal.open(modalProperties);
        return modalInstance.result.then(function(code) {
          if (code === 200) {
            return location.href = "#/";
          }
        });
      };
      $scope.updateProperty = function(property, data) {
        var updateData;
        if (!(property || data)) {
          return false;
        }
        updateData = {};
        updateData[property] = data;
        return nodesService.update($scope.nodeId, $.param(updateData))["catch"](function(request) {
          var messages, _ref;
          if ((((_ref = request.data) != null ? _ref.errForm : void 0) != null) && request.data.errForm[property]) {
            angular.forEach(request.data.errForm[property], function(value, key) {
              var messages;
              if (typeof messages !== "undefined" && messages !== null) {
                messages = messages + ";";
              }
              return messages = messages + value;
            });
          } else {
            messages = false;
          }
          return $q.reject(messages);
        });
      };
      return initServices = function() {
        var buildAvailableServices;
        $scope.loadServices = true;
        $scope.services = {
          selected: '',
          all: []
        };
        modulesService.list().success(function(data) {
          $scope.services.all = data;
          buildAvailableServices();
          return $scope.loadServices = false;
        }).error(function() {
          $scope.loadServices = false;
          buildAvailableServices();
          return $scope.errAddService = ['Failed to load services'];
        });
        $scope.addService = function(serviceName) {
          var service, updateData;
          $scope.errAddService = [];
          service = $filter('filter')($scope.services.available, {
            name: serviceName
          })[0];
          if ((service != null ? service._id : void 0) == null) {
            return false;
          }
          updateData = {
            services: {}
          };
          updateData.services[serviceName] = true;
          return nodesService.update($scope.node._id, $.param(updateData)).success(function(data) {
            $scope.node.services = data.node.services;
            $scope.services.selected = '';
            buildAvailableServices();
            return setTimeout(function() {
              return $('#tabServices-' + serviceName).tab('show');
            }, 0);
          }).error(function() {
            return $scope.errAddService.push('Failed');
          });
        };
        $scope.modalRemoveService = function(service) {
          var modalInstance, modalProperties;
          if (!service) {
            return false;
          }
          modalProperties = {
            templateUrl: '/partials/admin/nodes/modal/removeService.html',
            controller: 'nodeModalRemoveService',
            resolve: {
              service: function() {
                return service;
              },
              node: function() {
                return $scope.node;
              }
            }
          };
          modalInstance = $modal.open(modalProperties);
          return modalInstance.result.then(function(services) {
            $scope.node.services = services;
            $('#tabServicesList li a:first').tab('show');
            return buildAvailableServices();
          });
        };
        return buildAvailableServices = function() {
          var availableServices;
          if ($scope.node == null) {
            return false;
          }
          availableServices = [];
          angular.forEach($scope.services.all, function(service) {
            var _ref;
            if ((service.name != null) && (((_ref = $scope.node.services) != null ? _ref[service.name] : void 0) == null)) {
              return availableServices.push(service);
            }
          });
          if (!availableServices.length) {
            $scope.services.available = [
              {
                label: 'No services available',
                name: ''
              }
            ];
          } else {
            $scope.services.available = [
              {
                label: 'Add new service',
                name: ''
              }
            ];
          }
          return $scope.services.available = $scope.services.available.concat(availableServices);
        };
      };
    }
  ]);

  controllers.controller('nodeListController', [
    '$scope', 'nodesService', function($scope, nodesService) {
      var initBreadCrumb;
      $scope.nodes = [];
      $scope.loadUnregisteredNodes = true;
      nodesService.list({
        unregistered: 1
      }).success(function(data) {
        $scope.unregisteredNodes = data;
        return $scope.loadUnregisteredNodes = false;
      }).error(function() {
        $scope.unregisteredNodes = null;
        return $scope.loadUnregisteredNodes = false;
      });
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html('<li><a href="/">Dashboard</a><span class="divider">/</span></li><li class="active">Nodes</li>');
      };
      return initBreadCrumb();
    }
  ]);

  controllers.controller('nodeRegisterController', [
    '$scope', '$filter', '$routeParams', 'logsService', 'nodesService', function($scope, $filter, $routeParams, logsService, nodesService) {
      var initBreadCrumb;
      $scope.nodeName = $routeParams.nodeName;
      $scope.nodetypes = [
        {
          name: "Select a node type",
          value: ''
        }, {
          name: "Virtual Server",
          value: "virtual",
          image: "dummy_vm_200.png"
        }, {
          name: "Cloud Server",
          value: "cloud",
          image: "dummy_cloud_200.png"
        }, {
          name: "Dedicated Server‎",
          value: "dedicated",
          image: "dummy_server_200.png"
        }
      ];
      $scope.cancelRegistration = function() {
        return window.location = '#/';
      };
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html('<li><a href="/">Dashboard</a><span class="divider">/</span></li><li><a href="#/">Nodes</a><span class="divider">/</span></li><li class="active">register ' + $scope.nodeName + '</li>');
      };
      $scope.changetype = function(option) {
        if ((this.selected = $filter("filter")($scope.nodetypes, {
          value: option || ""
        })[0])) {
          return $scope.selected = this.selected;
        }
      };
      $scope.$watch("node.nodetype", function(option) {
        return $scope.changetype(option);
      });
      $scope.register = function() {
        $scope.errors = [];
        return nodesService.create($.param($scope.node)).success(function(response, status, headers) {
          if (headers('location') != null) {
            return window.location = headers('location');
          }
          return window.location = "#/";
        }).error(function(data) {
          if (data.errors) {
            return $scope.errors = data.errors;
          } else {
            return $scope.errors[0] = 'Request failed!';
          }
        });
      };
      $scope.loadLog = true;
      logsService.list({
        context: $scope.nodeName,
        type: "conflict",
        action: "unregistered api"
      }).success(function(data) {
        if (data.length) {
          $scope.node = data[0].data;
          $scope.node.nodetype = '';
        } else {
          $scope.log = null;
        }
        return $scope.loadLog = false;
      }).error(function() {
        $scope.log = null;
        return $scope.loadLog = false;
      });
      return initBreadCrumb();
    }
  ]);

  controllers.controller('nodeModalDelete', [
    '$scope', '$modalInstance', 'nodesService', 'nodeId', function($scope, $modalInstance, nodesService, nodeId) {
      $scope.ok = function() {
        $scope.errMessages = [];
        return nodesService["delete"](nodeId).success(function(data, code) {
          return $modalInstance.close(code);
        }).error(function() {
          return $scope.errMessages.push('Failed');
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]);

  controllers.controller('nodeModalRemoveService', [
    '$scope', '$modalInstance', 'service', 'node', 'nodesService', function($scope, $modalInstance, service, node, nodesService) {
      $scope.service = service;
      $scope.node = node;
      $scope.ok = function() {
        var updateData;
        $scope.errMessages = [];
        updateData = {
          services: {}
        };
        updateData.services[service.name] = false;
        return nodesService.update(node._id, $.param(updateData)).success(function(data) {
          return $modalInstance.close(data.node.services);
        }).error(function() {
          return $scope.errMessages.push('Failed');
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]);

  controllers.controller('modalDeleteClient', [
    '$scope', '$modalInstance', 'clientsService', 'clientId', function($scope, $modalInstance, clientsService, clientId) {
      $scope.ok = function() {
        $scope.errMessages = [];
        return clientsService["delete"](clientId).success(function(data, code) {
          return $modalInstance.close(code);
        }).error(function() {
          return $scope.errMessages.push('Failed');
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]);

  controllers.controller('modalRemoveClientService', [
    '$scope', '$modalInstance', 'service', 'client', 'clientsService', function($scope, $modalInstance, service, client, clientsService) {
      $scope.service = service;
      $scope.client = client;
      $scope.errMessages = [];
      $scope.ok = function() {
        var updateData;
        $scope.errMessages = [];
        updateData = {
          services: {}
        };
        updateData.services[service.name] = false;
        return clientsService.update(client._id, $.param(updateData)).success(function(data) {
          return $modalInstance.close(data.client.services);
        }).error(function() {
          return $scope.errMessages.push('Failed');
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]);

}).call(this);
