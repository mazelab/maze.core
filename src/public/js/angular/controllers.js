// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('maze.controllers', []).controller('clientListController', [
    '$scope', 'authService', '$filter', '$location', function($scope, authService, $filter, $location) {
      var initBreadCrumb;
      $scope.client = [];
      $scope.search = $location.search().search;
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.LABELS.CLIENTS")) + "</li>");
      };
      $scope.loginAsClient = function(id) {
        $scope.loadClientLogin = true;
        $scope.errors = {};
        return authService.client(id).success(function(data, code, headers) {
          if (headers('location')) {
            return window.location = headers('location');
          }
          return location.href = "/";
          return $scope.loadClientLogin = false;
        }).error(function(data) {
          $scope.errors[id] = [$filter("translate")("CORE.MESSAGES.REQUEST_FAILED")];
          return $scope.loadClientLogin = false;
        });
      };
      $scope.$watch("mazesearch", function(search) {
        return $scope.search = search;
      });
      return initBreadCrumb();
    }
  ]).controller('clientEditController', [
    '$scope', '$routeParams', '$q', '$modal', '$filter', '$timeout', 'clientsService', 'authService', 'modulesService', 'domainsService', 'logsService', 'nodesService', function($scope, $routeParams, $q, $modal, $filter, $timeout, clientsService, authService, modulesService, domainsService, logsService, nodesService) {
      var initBreadCrumb, initServices;
      $scope.client = {};
      $scope.clientId = $routeParams.clientId;
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/clients'>" + ($filter("translate")("CORE.LABELS.CLIENTS")) + "</a><span class='divider'>/</span></li><li class='active'>" + $scope.client.label + "</li>");
      };
      $scope.activate = function() {
        return $scope.changeState(true);
      };
      $scope.deactivate = function() {
        return $scope.changeState(false);
      };
      $scope.countObject = function(val) {
        if (!angular.isObject(val)) {
          return 0;
        }
        return Object.keys(val).length;
      };
      $scope.passwordPrompt = false;
      $scope.openPasswordPrompt = function() {
        return $scope.passwordPrompt = true;
      };
      $scope.updateAdditional = function(data) {
        return clientsService.update($scope.clientId, $.param(data)).success(function(data, code) {
          if (code === 200 && (data.client.additionalFields != null)) {
            return $scope.client.additionalFields = data.client.additionalFields;
          }
        });
      };
      $scope.closePasswordPrompt = function() {
        $scope.passwordPrompt = false;
        $scope.accessFormErr = [];
        $scope.accessData = {};
        return $scope.accessSuccess = false;
      };
      $scope.changeState = function(state) {
        $scope.alerts = [];
        return clientsService.update($scope.clientId, $.param({
          'status': state
        })).success(function(data) {
          return $scope.client.status = state;
        }).error(function() {
          return $scope.alerts = [
            {
              msg: $filter("translate")("CORE.MESSAGES.REQUEST_FAILED"),
              type: 'danger'
            }
          ];
        });
      };
      $scope.modalDelete = function() {
        var modalInstance, modalProperties;
        modalProperties = {
          templateUrl: '/partials/admin/clients/modal/delete.html',
          controller: 'clientModalDelete',
          resolve: {
            clientId: function() {
              return $scope.clientId;
            }
          }
        };
        modalInstance = $modal.open(modalProperties);
        return modalInstance.result.then(function(code) {
          if (code === 200) {
            return window.location = "#/";
          }
        });
      };
      $scope.loadLogs = true;
      logsService.list({
        client: $scope.clientId,
        limit: 10
      }).success(function(data) {
        $scope.logs = data;
        return $scope.loadLogs = false;
      }).error(function(data) {
        $scope.logs = null;
        return $scope.loadLogs = false;
      });
      $scope.loadDomains = true;
      domainsService.list({
        client: $scope.clientId,
        limit: 10
      }).success(function(data) {
        $scope.domains = data;
        return $scope.loadDomains = false;
      }).error(function() {
        $scope.domains = null;
        return $scope.loadDomains = false;
      });
      $scope.loadNodes = true;
      nodesService.list({
        client: $scope.clientId,
        limit: 10
      }).success(function(data) {
        $scope.nodes = data;
        return $scope.loadNodes = false;
      }).error(function() {
        $scope.nodes = null;
        return $scope.loadNodes = false;
      });
      $scope.loadClient = true;
      clientsService.get($scope.clientId).success(function(data) {
        $scope.client = data;
        $scope.loadClient = false;
        initBreadCrumb();
        return initServices();
      }).error(function() {
        $scope.client = null;
        return $scope.loadClient = false;
      });
      $scope.accessData = {};
      $scope.changeClientPassword = function() {
        if (!$scope.accessData.password || !$scope.accessData.confirmPassword) {
          return false;
        }
        $scope.accessFormErr = [];
        $scope.accessSuccess = false;
        return clientsService.update($scope.clientId, $.param($scope.accessData)).success(function() {
          $scope.accessSuccess = true;
          return $timeout(function() {
            return $scope.closePasswordPrompt();
          }, 4000);
        }).error(function(data) {
          if (data.errForm != null) {
            return $scope.accessFormErr = data.errForm;
          }
        });
      };
      $scope.updateProperty = function(property, data) {
        var updateData;
        if (!(property || data)) {
          return false;
        }
        updateData = {};
        updateData[property] = data;
        return clientsService.update($scope.clientId, $.param(updateData))["catch"](function(request) {
          var messages, _ref;
          if (((_ref = request.data.errForm) != null ? _ref[property] : void 0) != null) {
            messages = "";
            angular.forEach(request.data.errForm[property], function(value) {
              if (messages) {
                messages = messages + ";";
              }
              return messages = messages + value;
            });
          } else {
            messages = false;
          }
          return $q.reject(messages);
        });
      };
      $scope.loginAsClient = function() {
        if (!$scope.client._id) {
          return false;
        }
        $scope.loadClientLogin = true;
        $scope.errors = {};
        return authService.client($scope.client._id).success(function(data, code, headers) {
          if (headers('location')) {
            return window.location = headers('location');
          }
          return location.href = "/";
          return $scope.loadClientLogin = false;
        }).error(function(data) {
          $scope.alerts = [
            {
              msg: $filter("translate")("CORE.MESSAGES.REQUEST_FAILED"),
              type: 'danger'
            }
          ];
          return $scope.loadClientLogin = false;
        });
      };
      return initServices = function() {
        var buildAvailableServices;
        $scope.loadServices = true;
        $scope.services = {
          selected: '',
          all: []
        };
        modulesService.list().success(function(data) {
          $scope.services.all = data;
          buildAvailableServices();
          return $scope.loadServices = false;
        }).error(function() {
          $scope.loadServices = false;
          buildAvailableServices();
          return $scope.errAddService = [$filter("translate")("CORE.SERVICES.LOADING_FAILED")];
        });
        $scope.addService = function(serviceName) {
          var service, updateData;
          $scope.errAddService = [];
          service = $filter('filter')($scope.services.available, {
            name: serviceName
          })[0];
          if ((service != null ? service._id : void 0) == null) {
            return false;
          }
          updateData = {
            services: {}
          };
          updateData.services[serviceName] = true;
          return clientsService.update($scope.client._id, $.param(updateData)).success(function(data) {
            $scope.client.services = data.client.services;
            $scope.services.selected = '';
            buildAvailableServices();
            return setTimeout(function() {
              return $('#tabServices-' + serviceName).tab('show');
            }, 0);
          }).error(function(data) {
            var index, _ref, _ref1, _results;
            if ((data != null ? (_ref = data.messages) != null ? _ref.errors : void 0 : void 0) != null) {
              _results = [];
              for (index in data.messages.errors) {
                if ((data != null ? (_ref1 = data.messages) != null ? _ref1.errors : void 0 : void 0) != null) {
                  _results.push($scope.errAddService.push(data.messages.errors[index]));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            } else {
              return $scope.errAddService.push('Failed');
            }
          });
        };
        $scope.modalRemoveService = function(service) {
          var modalInstance, modalProperties;
          if (!service) {
            return false;
          }
          modalProperties = {
            templateUrl: '/partials/admin/clients/modal/removeService.html',
            controller: 'clientModalRemoveService',
            resolve: {
              service: function() {
                return service;
              },
              client: function() {
                return $scope.client;
              }
            }
          };
          modalInstance = $modal.open(modalProperties);
          return modalInstance.result.then(function(services) {
            $scope.client.services = services;
            $('#tabServicesList li a:first').tab('show');
            return buildAvailableServices();
          });
        };
        return buildAvailableServices = function() {
          var availableServices;
          if ($scope.client == null) {
            return false;
          }
          availableServices = [];
          angular.forEach($scope.services.all, function(service) {
            var _ref;
            if ((service.name != null) && (((_ref = $scope.client.services) != null ? _ref[service.name] : void 0) == null)) {
              return availableServices.push(service);
            }
          });
          if (!availableServices.length) {
            $scope.services.available = [
              {
                label: $filter("translate")("CORE.SERVICES.NOT_AVAILABLE"),
                name: ''
              }
            ];
          } else {
            $scope.services.available = [
              {
                label: $filter("translate")("CORE.SERVICES.ASSIGN_NEW"),
                name: ''
              }
            ];
          }
          return $scope.services.available = $scope.services.available.concat(availableServices);
        };
      };
    }
  ]).controller('clientModalDelete', [
    '$scope', '$filter', '$modalInstance', 'clientsService', 'clientId', function($scope, $filter, $modalInstance, clientsService, clientId) {
      $scope.ok = function() {
        $scope.errMessages = [];
        return clientsService["delete"](clientId).success(function(data, code) {
          return $modalInstance.close(code);
        }).error(function() {
          return $scope.errMessages.push($filter("translate")("CORE.LABELS.FAILED"));
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]).controller('clientModalRemoveService', [
    '$scope', '$filter', '$modalInstance', 'service', 'client', 'clientsService', function($scope, $filter, $modalInstance, service, client, clientsService) {
      $scope.service = service;
      $scope.client = client;
      $scope.errMessages = [];
      $scope.ok = function() {
        var updateData;
        $scope.errMessages = [];
        updateData = {
          services: {}
        };
        updateData.services[service.name] = false;
        return clientsService.update(client._id, $.param(updateData)).success(function(data) {
          return $modalInstance.close(data.client.services);
        }).error(function(response) {
          if (response.messages.notifications) {
            $scope.notifyMessages = response.messages.notifications;
          }
          if (response.messages.errors) {
            $scope.errMessages = response.messages.errors;
          }
          if (response.messages.successes) {
            $scope.successeMessages = response.messages.successes;
          }
          if (!$scope.successeMessages || !$scope.errMessages || !$scope.notifyMessages) {
            return $scope.errMessages.push($filter("translate")("CORE.LABELS.FAILED"));
          }
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]).controller('clientSwitchToController', [
    '$routeParams', 'authService', function($routeParams, authService) {
      return authService.client($routeParams.clientId).success(function() {
        return location.href = "/";
      }).error(function() {
        return setErrorMessages([$filter("translate")("CORE.MESSAGES.REQUEST_FAILED")]);
      });
    }
  ]).controller('clientNewController', [
    '$scope', 'clientsService', '$filter', function($scope, clientsService, $filter) {
      var initBreadCrumb;
      $scope.client = {};
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/clients'>" + ($filter("translate")("CORE.LABELS.CLIENTS")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.CLIENTS.CREATE_CLIENT")) + "</li>");
      };
      $scope.cancel = function() {
        return window.history.back();
      };
      $scope.createClient = function() {
        $scope.formErrors = $scope.messages = [];
        return clientsService.create($.param($scope.client)).success(function(data, status, headers) {
          if (headers('location')) {
            return window.location = headers('location');
          }
          return location.href = "#/";
        }).error(function(data) {
          if (data.messages != null) {
            $scope.messages = data.messages;
          }
          if (data.formErrors != null) {
            return $scope.formErrors = data.formErrors;
          }
        });
      };
      return initBreadCrumb();
    }
  ]).controller('domainModalRemoveService', [
    '$scope', '$filter', '$modalInstance', 'service', 'domain', 'domainsService', function($scope, $filter, $modalInstance, service, domain, domainsService) {
      $scope.service = service;
      $scope.domain = domain;
      $scope.ok = function() {
        var updateData;
        $scope.errMessages = [];
        updateData = {
          services: {}
        };
        updateData.services[service.name] = false;
        return domainsService.update(domain._id, $.param(updateData)).success(function(data) {
          return $modalInstance.close(data.domain.services);
        }).error(function() {
          return $scope.errMessages.push($filter("translate")("CORE.LABELS.FAILED"));
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]).controller('domainModalDelete', [
    '$scope', '$filter', '$modalInstance', 'domainsService', 'domainId', function($scope, $filter, $modalInstance, domainsService, domainId) {
      $scope.ok = function() {
        $scope.errMessages = [];
        return domainsService["delete"](domainId).success(function(data, code) {
          return $modalInstance.close(code);
        }).error(function() {
          return $scope.errMessages.push($filter("translate")("CORE.LABELS.FAILED"));
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]).controller('domainListController', [
    '$scope', '$filter', '$location', function($scope, $filter, $location) {
      var initBreadCrumb;
      $scope.domains = [];
      $scope.search = $location.search().search;
      $scope.$watch("mazesearch", function(search) {
        return $scope.search = search;
      });
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.LABELS.DOMAINS")) + "</li>");
      };
      return initBreadCrumb();
    }
  ]).controller('domainEditController', [
    '$scope', '$filter', '$modal', '$q', 'domainsService', '$routeParams', 'modulesService', 'logsService', 'nodesService', function($scope, $filter, $modal, $q, domainsService, $routeParams, modulesService, logsService, nodesService) {
      var initBreadCrumb, initServices;
      $scope.domainId = $routeParams.domainId;
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/domains'>" + ($filter("translate")("CORE.LABELS.DOMAINS")) + "</a><span class='divider'>/</span></li><li class='active'>" + $scope.domain.name + "</li>");
      };
      $scope.countObject = function(val) {
        if (!angular.isObject(val)) {
          return 0;
        }
        return Object.keys(val).length;
      };
      $scope.updateAdditional = function(data) {
        return domainsService.update($scope.domainId, $.param(data)).success(function(data) {
          var _ref;
          if (((_ref = data.domain) != null ? _ref.additionalFields : void 0) != null) {
            return $scope.domain.additionalFields = data.domain.additionalFields;
          }
        });
      };
      $scope.loadLogs = true;
      logsService.list({
        domain: $scope.domainId,
        limit: 10
      }).success(function(data) {
        $scope.logs = data;
        return $scope.loadLogs = false;
      }).error(function(data) {
        $scope.logs = null;
        return $scope.loadLogs = false;
      });
      $scope.loadNodes = true;
      nodesService.list({
        domain: $scope.domainId,
        limit: 10
      }).success(function(data) {
        $scope.nodes = data;
        return $scope.loadNodes = false;
      }).error(function() {
        $scope.nodes = null;
        return $scope.loadNodes = false;
      });
      $scope.loadDomain = true;
      domainsService.get($scope.domainId).success(function(data) {
        $scope.domain = data;
        $scope.loadDomain = false;
        initBreadCrumb();
        return initServices();
      }).error(function(data, code) {
        if (code === 404) {
          window.location = '#/';
        }
        return $scope.loadDomain = false;
      });
      $scope.modalDeleteDomain = function() {
        var modalInstance, modalProperties;
        modalProperties = {
          templateUrl: '/partials/admin/domains/modal/delete.html',
          controller: 'domainModalDelete',
          resolve: {
            domainId: function() {
              return $scope.domainId;
            }
          }
        };
        modalInstance = $modal.open(modalProperties);
        return modalInstance.result.then(function(code) {
          if (code === 200) {
            return window.location = "#/";
          }
        });
      };
      $scope.updateProperty = function(property, data) {
        var updateData;
        if (!(property || data)) {
          return false;
        }
        updateData = {};
        updateData[property] = data;
        return domainsService.update($scope.domainId, $.param(updateData))["catch"](function(request) {
          var messages, _ref;
          if (((_ref = request.data.errForm) != null ? _ref[property] : void 0) != null) {
            messages = "";
            angular.forEach(request.data.errForm[property], function(value, key) {
              if (messages != null) {
                messages = messages + ";";
              }
              return messages = messages + value;
            });
          } else {
            messages = false;
          }
          return $q.reject(messages);
        });
      };
      return initServices = function() {
        var buildAvailableServices;
        $scope.loadServices = true;
        $scope.services = {
          selected: '',
          all: []
        };
        modulesService.list().success(function(data) {
          $scope.services.all = data;
          buildAvailableServices();
          return $scope.loadServices = false;
        }).error(function() {
          $scope.loadServices = false;
          buildAvailableServices();
          return $scope.errAddService = [$filter("translate")("CORE.SERVICES.LOADING_FAILED")];
        });
        $scope.addService = function(serviceName) {
          var service, updateData;
          $scope.errAddService = [];
          service = $filter('filter')($scope.services.available, {
            name: serviceName
          })[0];
          if ((service != null ? service._id : void 0) == null) {
            return false;
          }
          updateData = {
            services: {}
          };
          updateData.services[serviceName] = true;
          return domainsService.update($scope.domain._id, $.param(updateData)).success(function(data) {
            $scope.domain.services = data.domain.services;
            $scope.services.selected = '';
            buildAvailableServices();
            return setTimeout(function() {
              return $('#tabServices-' + serviceName).tab('show');
            }, 0);
          }).error(function() {
            return $scope.errAddService.push($filter("translate")("CORE.LABELS.FAILED"));
          });
        };
        $scope.modalRemoveDomainService = function(service) {
          var modalInstance, modalProperties;
          if (!service) {
            return false;
          }
          modalProperties = {
            templateUrl: '/partials/admin/domains/modal/removeService.html',
            controller: 'domainModalRemoveService',
            resolve: {
              service: function() {
                return service;
              },
              domain: function() {
                return $scope.domain;
              }
            }
          };
          modalInstance = $modal.open(modalProperties);
          return modalInstance.result.then(function(services) {
            $scope.domain.services = services;
            $('#tabServicesList li a:first').tab('show');
            return buildAvailableServices();
          });
        };
        return buildAvailableServices = function() {
          var availableServices;
          if ($scope.domain == null) {
            return false;
          }
          availableServices = [];
          angular.forEach($scope.services.all, function(service) {
            var _ref;
            if ((service.name != null) && (((_ref = $scope.domain.services) != null ? _ref[service.name] : void 0) == null)) {
              return availableServices.push(service);
            }
          });
          if (!availableServices.length) {
            $scope.services.available = [
              {
                label: $filter("translate")("CORE.SERVICES.NOT_AVAILABLE"),
                name: ''
              }
            ];
          } else {
            $scope.services.available = [
              {
                label: $filter("translate")("CORE.SERVICES.ASSIGN_NEW"),
                name: ''
              }
            ];
          }
          return $scope.services.available = $scope.services.available.concat(availableServices);
        };
      };
    }
  ]).controller('domainNewController', [
    '$scope', '$filter', 'domainsService', 'clientsService', function($scope, $filter, domainsService, clientsService) {
      var initBreadCrumb;
      $scope.clients = $scope.domain = $scope.selected = {};
      $scope.changeclient = function(option) {
        return $scope.selected = $filter("filter")($scope.clients, {
          _id: option
        })[0];
      };
      clientsService.list().success(function(clients) {
        return $scope.clients = clients || {};
      });
      $scope.createDomain = function() {
        $scope.formErrors = $scope.messages = [];
        return domainsService.create($.param($scope.domain)).success(function(data, status, headers) {
          if (headers('location')) {
            return window.location = headers('location');
          }
          return window.history.back();
        }).error(function(data) {
          if (data.messages != null) {
            $scope.messages = data.messages;
          }
          if (data.formErrors != null) {
            return $scope.formErrors = data.formErrors;
          }
        });
      };
      $scope.cancelCreation = function() {
        return window.history.back();
      };
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/domains'>" + ($filter("translate")("CORE.LABELS.DOMAINS")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.DOMAINS.CREATE_DOMAIN")) + "</li>");
      };
      return initBreadCrumb();
    }
  ]).controller('nodeEditController', [
    '$scope', '$filter', '$modal', '$q', '$routeParams', 'nodesService', 'logsService', 'modulesService', 'clientsService', 'domainsService', function($scope, $filter, $modal, $q, $routeParams, nodesService, logsService, modulesService, clientsService, domainsService) {
      var initBreadCrumb, initNodeTypeSelect, initServices;
      $scope.nodeId = $routeParams.nodeId;
      $scope.nodetypes = [
        {
          name: $filter("translate")("CORE.NODES.SERVER_VIRTUAL"),
          value: "virtual",
          image: "dummy_vm_200.png"
        }, {
          name: $filter("translate")("CORE.NODES.SERVER_CLOUD‎"),
          value: "cloud",
          image: "dummy_cloud_200.png"
        }, {
          name: $filter("translate")("CORE.NODES.SERVER_DEDICATED‎"),
          value: "dedicated",
          image: "dummy_server_200.png"
        }
      ];
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/nodes'>" + ($filter("translate")("CORE.LABELS.NODES")) + "</a><span class='divider'>/</span></li><li class='active'>" + $scope.node.name + "</li>");
      };
      $scope.countObject = function(val) {
        if (!angular.isObject(val)) {
          return 0;
        }
        return Object.keys(val).length;
      };
      $scope.updateAdditional = function(data) {
        return nodesService.update($scope.nodeId, $.param(data)).success(function(data, code) {
          if (code === 200 && (data.node.additionalFields != null)) {
            return $scope.node.additionalFields = data.node.additionalFields;
          }
        });
      };
      $scope.loadNode = true;
      nodesService.get($scope.nodeId).success(function(data) {
        $scope.node = data;
        $scope.loadNode = false;
        initBreadCrumb();
        initServices();
        return initNodeTypeSelect();
      }).error(function(data, code) {
        if (code === 404) {
          window.location = '#/';
        }
        return $scope.loadNode = false;
      });
      initNodeTypeSelect = function() {
        $scope.$watch("node.nodetype", function(option) {
          return $scope.changeNodeType(option);
        });
        return $scope.changeNodeType = function(option) {
          var select;
          option = option || $scope.node.nodetype;
          select = $filter("filter")($scope.nodetypes, {
            value: option
          })[0];
          if (option && ((select != null ? select.value : void 0) != null)) {
            return $scope.selected = select;
          }
        };
      };
      $scope.loadLogs = true;
      logsService.list({
        node: $scope.nodeId,
        limit: 10
      }).success(function(data) {
        $scope.logs = data;
        return $scope.loadLogs = false;
      }).error(function() {
        $scope.loadLogs = false;
        return $scope.logs = null;
      });
      $scope.loadClients = true;
      clientsService.list({
        node: $scope.nodeId,
        limit: 10
      }).success(function(data) {
        $scope.clients = data;
        return $scope.loadClients = false;
      }).error(function() {
        $scope.clients = null;
        return $scope.loadClients = false;
      });
      $scope.loadDomains = true;
      domainsService.list({
        node: $scope.nodeId,
        limit: 10
      }).success(function(data) {
        $scope.domains = data;
        return $scope.loadDomains = false;
      }).error(function() {
        $scope.domains = null;
        return $scope.loadDomains = false;
      });
      $scope.modalDelete = function() {
        var modalInstance, modalProperties;
        modalProperties = {
          templateUrl: '/partials/admin/nodes/modal/delete.html',
          controller: 'nodeModalDelete',
          resolve: {
            nodeId: function() {
              return $scope.nodeId;
            }
          }
        };
        modalInstance = $modal.open(modalProperties);
        return modalInstance.result.then(function(code) {
          if (code === 200) {
            return location.href = "#/";
          }
        });
      };
      $scope.updateProperty = function(property, data) {
        var updateData;
        if (!(property || data)) {
          return false;
        }
        updateData = {};
        updateData[property] = data;
        return nodesService.update($scope.nodeId, $.param(updateData))["catch"](function(request) {
          var messages, _ref;
          if (((_ref = request.data.errForm) != null ? _ref[property] : void 0) != null) {
            messages = "";
            angular.forEach(request.data.errForm[property], function(value, key) {
              if (messages != null) {
                messages = messages + ";";
              }
              return messages = messages + value;
            });
          } else {
            messages = false;
          }
          return $q.reject(messages);
        });
      };
      return initServices = function() {
        var buildAvailableServices;
        $scope.loadServices = true;
        $scope.services = {
          selected: '',
          all: []
        };
        modulesService.list().success(function(data) {
          $scope.services.all = data;
          buildAvailableServices();
          return $scope.loadServices = false;
        }).error(function() {
          $scope.loadServices = false;
          buildAvailableServices();
          return $scope.errAddService = [$filter("translate")("CORE.SERVICES.LOADING_FAILED")];
        });
        $scope.addService = function(serviceName) {
          var service, updateData;
          $scope.errAddService = [];
          service = $filter('filter')($scope.services.available, {
            name: serviceName
          })[0];
          if ((service != null ? service._id : void 0) == null) {
            return false;
          }
          updateData = {
            services: {}
          };
          updateData.services[serviceName] = true;
          return nodesService.update($scope.node._id, $.param(updateData)).success(function(data) {
            $scope.node.services = data.node.services;
            $scope.services.selected = '';
            buildAvailableServices();
            return setTimeout(function() {
              return $('#tabServices-' + serviceName).tab('show');
            }, 0);
          }).error(function() {
            return $scope.errAddService.push($filter("translate")("CORE.LABELS.FAILED"));
          });
        };
        $scope.modalRemoveService = function(service) {
          var modalInstance, modalProperties;
          if (!service) {
            return false;
          }
          modalProperties = {
            templateUrl: '/partials/admin/nodes/modal/removeService.html',
            controller: 'nodeModalRemoveService',
            resolve: {
              service: function() {
                return service;
              },
              node: function() {
                return $scope.node;
              }
            }
          };
          modalInstance = $modal.open(modalProperties);
          return modalInstance.result.then(function(services) {
            $scope.node.services = services;
            $('#tabServicesList li a:first').tab('show');
            return buildAvailableServices();
          });
        };
        return buildAvailableServices = function() {
          var availableServices;
          if ($scope.node == null) {
            return false;
          }
          availableServices = [];
          angular.forEach($scope.services.all, function(service) {
            var _ref;
            if ((service.name != null) && (((_ref = $scope.node.services) != null ? _ref[service.name] : void 0) == null)) {
              return availableServices.push(service);
            }
          });
          if (!availableServices.length) {
            $scope.services.available = [
              {
                label: $filter("translate")("CORE.SERVICES.NOT_AVAILABLE"),
                name: ''
              }
            ];
          } else {
            $scope.services.available = [
              {
                label: $filter("translate")("CORE.SERVICES.ASSIGN_NEW"),
                name: ''
              }
            ];
          }
          return $scope.services.available = $scope.services.available.concat(availableServices);
        };
      };
    }
  ]).controller('nodeListController', [
    '$scope', 'nodesService', '$filter', '$location', function($scope, nodesService, $filter, $location) {
      var initBreadCrumb;
      $scope.nodes = [];
      $scope.search = $location.search().search;
      $scope.loadUnregisteredNodes = true;
      nodesService.list({
        unregistered: 1
      }).success(function(data) {
        $scope.unregisteredNodes = data;
        return $scope.loadUnregisteredNodes = false;
      }).error(function() {
        $scope.unregisteredNodes = null;
        return $scope.loadUnregisteredNodes = false;
      });
      $scope.$watch("mazesearch", function(search) {
        return $scope.search = search;
      });
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.LABELS.NODES")) + "</li>");
      };
      return initBreadCrumb();
    }
  ]).controller('nodeRegisterController', [
    '$scope', '$filter', '$routeParams', 'logsService', 'nodesService', function($scope, $filter, $routeParams, logsService, nodesService) {
      var initBreadCrumb;
      $scope.nodeName = $routeParams.nodeName;
      $scope.nodetypes = [
        {
          name: $filter("translate")("CORE.NODES.SELECT_NODETYPE"),
          value: ''
        }, {
          name: $filter("translate")("CORE.NODES.SERVER_VIRTUAL"),
          value: "virtual",
          image: "dummy_vm_200.png"
        }, {
          name: $filter("translate")("CORE.NODES.SERVER_CLOUD‎"),
          value: "cloud",
          image: "dummy_cloud_200.png"
        }, {
          name: $filter("translate")("CORE.NODES.SERVER_DEDICATED‎"),
          value: "dedicated",
          image: "dummy_server_200.png"
        }
      ];
      $scope.cancelRegistration = function() {
        return window.history.back();
      };
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/nodes'>" + ($filter("translate")("CORE.LABELS.NODES")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.NODES.REGISTER")) + ": " + $scope.nodeName + "</li>");
      };
      $scope.changetype = function(option) {
        if ((this.selected = $filter("filter")($scope.nodetypes, {
          value: option || ""
        })[0])) {
          return $scope.selected = this.selected;
        }
      };
      $scope.$watch("node.nodetype", function(option) {
        return $scope.changetype(option);
      });
      $scope.register = function() {
        $scope.messages = [];
        return nodesService.create($.param($scope.node)).success(function(response, status, headers) {
          if (headers('location') != null) {
            return window.location = headers('location');
          }
          return window.location = "#/";
        }).error(function(data) {
          var _ref;
          if (data.messages != null) {
            $scope.messages = data.messages;
          }
          if (((_ref = data.messages) != null ? _ref.errors : void 0) == null) {
            return $scope.messages.errors[0] = $filter("translate")("CORE.MESSAGES.REQUEST_FAILED");
          }
        });
      };
      $scope.loadLog = true;
      logsService.list({
        context: $scope.nodeName,
        type: "conflict",
        action: "unregistered api"
      }).success(function(data) {
        if (data.length) {
          $scope.node = data[0].data;
          $scope.node.nodetype = '';
        } else {
          $scope.log = null;
        }
        return $scope.loadLog = false;
      }).error(function() {
        $scope.log = null;
        return $scope.loadLog = false;
      });
      return initBreadCrumb();
    }
  ]).controller('nodeModalDelete', [
    '$scope', '$filter', '$modalInstance', 'nodesService', 'nodeId', function($scope, $filter, $modalInstance, nodesService, nodeId) {
      $scope.ok = function() {
        $scope.errMessages = [];
        return nodesService["delete"](nodeId).success(function(data, code) {
          return $modalInstance.close(code);
        }).error(function() {
          return $scope.errMessages.push($filter("translate")("CORE.LABELS.FAILED"));
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]).controller('nodeModalRemoveService', [
    '$scope', '$filter', '$modalInstance', 'service', 'node', 'nodesService', function($scope, $filter, $modalInstance, service, node, nodesService) {
      $scope.service = service;
      $scope.node = node;
      $scope.ok = function() {
        var updateData;
        $scope.errMessages = [];
        updateData = {
          services: {}
        };
        updateData.services[service.name] = false;
        return nodesService.update(node._id, $.param(updateData)).success(function(data) {
          return $modalInstance.close(data.node.services);
        }).error(function() {
          return $scope.errMessages.push($filter("translate")("CORE.LABELS.FAILED"));
        });
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss();
      };
    }
  ]).controller('searchListController', [
    '$scope', '$filter', '$location', function($scope, $filter, $location) {
      var initBreadCrumb;
      $scope.result = [];
      $scope.search = $location.search().search;
      $scope.$watch("mazesearch", function(search) {
        $scope.search = search;
        return initBreadCrumb();
      });
      initBreadCrumb = function() {
        return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a>" + ($filter("translate")("CORE.DIRECTIVES.SEARCH_LABEL")) + "</a><span class='divider'>/</span></li><li class='active'>" + $scope.search + "</li>");
      };
      return initBreadCrumb();
    }
  ]).controller('dashboardController', [
    '$scope', '$filter', '$location', function($scope, $filter, $location) {
      return $('ul.breadcrumb').html("<li class='active'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</li>");
    }
  ]).controller('newsListController', [
    '$scope', '$filter', function($scope, $filter) {
      return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.NEWS.MESSAGES")) + "</li>");
    }
  ]).controller('newsEditController', [
    '$scope', '$filter', '$routeParams', function($scope, $filter, $routeParams) {
      return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/news/'>" + ($filter("translate")("CORE.NEWS.MESSAGES")) + "</a><span class='divider'>/</span></li><li class='active'>" + $routeParams.title + "</li>");
    }
  ]).controller('newsAddController', [
    '$scope', '$filter', function($scope, $filter) {
      return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/news/'>" + ($filter("translate")("CORE.NEWS.MESSAGES")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.NEWS.WRITE_MESSAGE")) + "</li>");
    }
  ]).controller('profileController', [
    '$scope', '$filter', function($scope, $filter) {
      return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.CLIENTS.MY_PROFILE")) + "</li>");
    }
  ]).controller('profileAccessController', [
    '$scope', '$filter', function($scope, $filter) {
      return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/profile/'>" + ($filter("translate")("CORE.CLIENTS.MY_PROFILE")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.LABELS.CHANGE_PASSWORD")) + "</li>");
    }
  ]).controller('systemController', [
    '$scope', '$filter', function($scope, $filter) {
      return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.SYSTEM.SYSTEM_LABEL")) + "</li>");
    }
  ]).controller('systemAddAdminController', [
    '$scope', '$filter', function($scope, $filter) {
      return $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/system/'>" + ($filter("translate")("CORE.SYSTEM.SYSTEM_LABEL")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.SYSTEM.CREATE_ADMIN")) + "</li>");
    }
  ]).controller('moduleListController', [
    '$scope', '$filter', '$route', '$templateCache', function($scope, $filter, $route, $templateCache) {
      $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")("CORE.MODULES.MODULE_LABEL")) + "</li>");
      return angular.element("#buttonListUpdate").on("reloadTemplateCache", function() {
        $templateCache.remove($route.current.templateUrl);
        return $route.reload();
      });
    }
  ]).controller('moduleDetailController', [
    '$scope', '$filter', '$routeParams', 'modulesService', function($scope, $filter, $routeParams, modulesService) {
      $('ul.breadcrumb').html("<li><a href='#/'>" + ($filter("translate")("CORE.LABELS.DASHBOARD")) + "</a><span class='divider'>/</span></li><li><a href='#/modules/'>" + ($filter("translate")("CORE.MODULES.MODULE_LABEL")) + "</a><span class='divider'>/</span></li><li class='active'>" + ($filter("translate")($routeParams.moduleName)) + "</li>");
      $scope.module = {
        name: $routeParams.moduleName
      };
      $scope.update = function(data) {
        return modulesService.set($scope.module.name, data).success(function(module, status) {
          if (status === 202) {
            return $scope.module = module;
          }
        });
      };
      return modulesService.get($scope.module.name).success(function(module) {
        if (module) {
          return $scope.module = module;
        }
      });
    }
  ]);

}).call(this);
