// Generated by CoffeeScript 1.7.1
(function() {
  var directives;

  directives = angular.module("maze.directives", []);

  directives.directive('mazeDlWrapper', [
    function() {
      return {
        restrict: 'A',
        scope: {
          'label': '@',
          'dlClass': '@',
          'dtClass': '@',
          'ddClass': '@'
        },
        transclude: true,
        templateUrl: '/partials/admin/directives/dlWrapper.html'
      };
    }
  ]);

  directives.directive('mazeHtmlPopover', [
    function() {
      return {
        restrict: 'A',
        scope: {
          label: '@',
          title: '@',
          placement: '@',
          namespace: '@',
          single: '@'
        },
        transclude: true,
        template: '<div><a class="{{namespace}}" href="" onclick="return false;">{{label || "popover"}}</span></div>',
        compile: function(element, attrs) {
          if (attrs.namespace == null) {
            attrs.namespace = 'aMazeHtmlPopover';
          }
          if ((attrs.single != null) && attrs.single && !attrs.single === 'false') {
            attrs.single = true;
          }
          return {
            post: function($scope, element, attrs, ctrl, transclude) {
              var clickEvent;
              clickEvent = function() {
                if ($scope.single === 'true') {
                  return $('.' + $scope.namespace).not(this).popover('hide');
                }
              };
              return transclude($scope.$parent, function(content) {
                return element.find('a').unbind('click').popover({
                  content: content,
                  html: true,
                  trigger: 'click',
                  placement: $scope.placement,
                  title: $scope.title
                }).click(clickEvent);
              });
            }
          };
        }
      };
    }
  ]);

  directives.directive('mazeSearch', [
    function() {
      return {
        restrict: 'A',
        templateUrl: '/partials/admin/directives/search.html',
        transclude: true,
        scope: {
          data: '=',
          limit: '@',
          page: '@',
          uri: '@'
        },
        compile: function(element, attrs) {
          if (attrs.limit == null) {
            attrs.limit = 10;
          }
          if (attrs.page == null) {
            return attrs.page = 1;
          }
        },
        controller: function($scope, $http, $q) {
          var load;
          $scope.search = $scope.first = $scope.last = $scope.total = '';
          if (!$scope.uri) {
            return false;
          }
          $scope.$parent.$on('mazeSearchReload', function() {
            return load();
          });
          $scope.$watch('page + search + limit', function() {
            return load();
          });
          return load = function() {
            var params;
            $scope.loadPager = true;
            $scope.errorMsg = [];
            params = {
              search: $scope.search || '',
              page: $scope.page || 1,
              limit: $scope.limit || 10
            };
            if ($scope.currentRequest) {
              $scope.currentRequest.resolve();
            }
            $scope.currentRequest = $q.defer();
            return $http.get($scope.uri, {
              timeout: $scope.currentRequest.promise,
              params: params
            }).success(function(data) {
              if (data.data != null) {
                $scope.data = data.data;
              } else {
                $scope.data = [];
              }
              if (data.total != null) {
                $scope.first = (params.limit * (params.page - 1)) + 1;
                $scope.last = ($scope.first + $scope.data.length) - 1;
                $scope.total = data.total;
              } else {
                $scope.total = 0;
              }
              return $scope.loadPager = false;
            }).error(function(data, code) {
              if (code === 0) {
                return false;
              }
              $scope.data = null;
              $scope.loadPager = false;
              return $scope.errorMsg = ['Request failed!'];
            });
          };
        }
      };
    }
  ]);

  directives.directive('mazeAdditional', [
    function() {
      return {
        restrict: "A",
        scope: {
          fields: "=",
          update: "@"
        },
        templateUrl: '/partials/admin/directives/additional.html',
        controller: [
          '$scope', '$parse', function($scope, $parse) {
            var keyExists;
            $scope.errors = $scope.fields = $scope.created = {};
            $scope.openNewForm = false;
            $scope.open = function() {
              return $scope.openNewForm = true;
            };
            $scope.hide = function() {
              $scope.openNewForm = false;
              return $scope.errors = $scope.created = {};
            };
            keyExists = function(key) {
              var found;
              found = false;
              angular.forEach($scope.fields, function(additional) {
                if (additional.label === key) {
                  return found = true;
                }
              });
              return found;
            };
            $scope.create = function(key, value) {
              var updateData;
              if ((key == null) || (value == null) || !$scope.update) {
                return false;
              }
              $scope.errors = {};
              if (($scope.fields != null) && keyExists(key)) {
                $scope.errors.additionalValue = ["this label allready exists"];
                return false;
              }
              updateData = {
                additionalKey: key,
                additionalValue: value
              };
              return $parse($scope.update)($scope.$parent, {
                $data: updateData
              }).then(function() {
                return $scope.hide();
              });
            };
            $scope.updateAdditional = function(id, data) {
              var updateData;
              if (!id || !$scope.update || !$scope.fields) {
                return false;
              }
              updateData = {
                additionalFields: {}
              };
              updateData.additionalFields[id] = {
                value: data
              };
              return $parse($scope.update)($scope.$parent, {
                $data: updateData
              });
            };
            return $scope.keyDown = function(event) {
              var endPos, startPos;
              if (9 === (event.keyCode || event.which) && event.target.nodeName.toLowerCase() === "textarea") {
                startPos = event.target.selectionStart;
                endPos = event.target.selectionEnd;
                event.target.value = event.target.value.substring(0, startPos) + "\t" + event.target.value.substring(endPos, event.target.value.length);
                event.target.focus();
                event.target.selectionStart = startPos + "\t".length;
                event.target.selectionEnd = startPos + "\t".length;
                event.preventDefault();
              } else if (event.which === 9) {
                event.preventDefault();
              }
              return event;
            };
          }
        ]
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=directives.map
