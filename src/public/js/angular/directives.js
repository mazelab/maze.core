// Generated by CoffeeScript 1.7.1
(function() {
  var directives;

  directives = angular.module("maze.directives", []);

  directives.directive('mazeDlWrapper', [
    function() {
      return {
        restrict: 'E',
        scope: {
          'label': '@',
          'dlClass': '@',
          'dtClass': '@',
          'ddClass': '@'
        },
        transclude: true,
        templateUrl: '/partials/admin/directives/dlWrapper.html'
      };
    }
  ]);

  directives.directive('mazeHtmlPopover', [
    function() {
      return {
        restrict: 'E',
        scope: {
          label: '@',
          title: '@',
          placement: '@'
        },
        transclude: true,
        template: '<div><a href="" onclick="return false;">{{label || "popover"}}</a></div>',
        link: function(scope, element, attrs, ctrl, transclude) {
          return $(element).find('a').popover({
            content: transclude(),
            html: true,
            trigger: 'click',
            placement: scope.placement,
            title: scope.title
          });
        }
      };
    }
  ]);

  directives.directive('mazeAdditional', [
    function() {
      return {
        restrict: "E",
        scope: {
          fields: "="
        },
        templateUrl: '/partials/admin/directives/additional.html',
        controller: [
          '$scope', '$attrs', '$parse', function($scope, $attrs, $parse) {
            $scope._errors = $scope._fields = $scope._created = {};
            $scope._activeId = null;
            $scope._infotext = angular.element("#additional-infotext");
            $scope._newfield = angular.element("#additional-newfield");
            $scope._open = function() {
              this._infotext.hide();
              return this._newfield.show();
            };
            $scope._hide = function() {
              this._infotext.show();
              this._newfield.hide();
              return $scope._errors = {};
            };
            $scope._create = function() {
              var id, _i, _len, _ref;
              if ($attrs.update && $attrs.fields && $scope.fields) {
                this.model = angular.copy($scope.fields);
                this.model.additionalKey = this._created.label;
                this.model.additionalValue = this._created.value;
                _ref = this.model.additionalFields;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  id = _ref[_i];
                  if (this.model.additionalFields[id].label === this._created.label) {
                    $scope._errors.additionalValue = ["this label allready exists"];
                    return false;
                  }
                }
                return $parse($attrs.update)($scope.$parent, {
                  $data: this.model
                }).then(function() {
                  $scope._hide();
                  return $scope._created = {};
                });
              }
            };
            $scope._update = function(id, data) {
              var update;
              if (id && $attrs.update && $attrs.fields) {
                update = {
                  additionalFields: {}
                };
                update.additionalFields[id] = {
                  value: data
                };
                return $parse($attrs.update)($scope.$parent, {
                  $data: update
                });
              }
            };
            return $scope._keydown = function(event) {
              var endPos, startPos;
              if (9 === (event.keyCode || event.which) && event.target.nodeName.toLowerCase() === "textarea") {
                startPos = event.target.selectionStart;
                endPos = event.target.selectionEnd;
                event.target.value = event.target.value.substring(0, startPos) + "\t" + event.target.value.substring(endPos, event.target.value.length);
                event.target.focus();
                event.target.selectionStart = startPos + "\t".length;
                event.target.selectionEnd = startPos + "\t".length;
                event.preventDefault();
              } else if (event.which === 9) {
                event.preventDefault();
              }
              return event;
            };
          }
        ]
      };
    }
  ]);

  directives.directive('mazeSearch', [
    function() {
      return {
        restrict: 'E',
        templateUrl: '/partials/admin/directives/search.html',
        transclude: true,
        scope: {
          data: '=',
          limit: '@',
          page: '@',
          uri: '@'
        },
        compile: function(element, attrs) {
          if (attrs.limit == null) {
            attrs.limit = 10;
          }
          if (attrs.page == null) {
            return attrs.page = 1;
          }
        },
        controller: function($scope, $http, $q) {
          $scope.search = $scope.first = $scope.last = $scope.total = '';
          if (!$scope.uri) {
            return false;
          }
          return $scope.$watch('page + search + limit', function() {
            var params;
            $scope.loadPager = true;
            $scope.errorMsg = [];
            params = {
              search: $scope.search || '',
              page: $scope.page || 1,
              limit: $scope.limit || 10
            };
            if ($scope.currentRequest) {
              $scope.currentRequest.resolve();
            }
            $scope.currentRequest = $q.defer();
            return $http.get($scope.uri, {
              timeout: $scope.currentRequest.promise,
              params: params
            }).success(function(data) {
              if (data.data != null) {
                $scope.data = data.data;
              } else {
                $scope.data = [];
              }
              if (data.total != null) {
                $scope.first = (params.limit * (params.page - 1)) + 1;
                $scope.last = ($scope.first + $scope.data.length) - 1;
                $scope.total = data.total;
              } else {
                $scope.total = 0;
              }
              return $scope.loadPager = false;
            }).error(function(data, code) {
              if (code === 0) {
                return false;
              }
              $scope.data = null;
              $scope.loadPager = false;
              return $scope.errorMsg = ['Request failed!'];
            });
          });
        }
      };
    }
  ]);

}).call(this);
